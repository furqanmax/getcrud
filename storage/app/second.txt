

            $asd->asd = $request->asd;
            $fas->fas = $request->fas;
            $df->df = $request->df;
            $asdf->asdf = $request->asdf;
        public function index()
        {
          $ghars = Ghar::orderBy('updated_at','desc')->get();
          
          return view('one.ghars.index',compact('ghars')); 
        }
        public function create()
        {
          return view('one.ghars.create');
        }

            $asd->asd = $request->asd;
            $fas->fas = $request->fas;
            $df->df = $request->df;
            $asdf->asdf = $request->asdf;
        
        public function index()
        {
          $ghars = Ghar::orderBy('updated_at','desc')->get();
          
          return view('one.ghars.index',compact('ghars')); 
        }

        public function create()
        {
          return view('one.ghars.create');
        }

            $asd->asd = $request->asd;
            $fas->fas = $request->fas;
            $df->df = $request->df;
            $asdf->asdf = $request->asdf;

        public function index()
        {
          $ghars = Ghar::orderBy('updated_at','desc')->get();
          
          return view('one.ghars.index',compact('ghars')); 
        }

        public function create()
        {
          return view('one.ghars.create');
        }

            $asd->asd = $request->asd;
            $fas->fas = $request->fas;
            $df->df = $request->df;
            $asdf->asdf = $request->asdf;

        public function index()
        {
          $ghars = Ghar::orderBy('updated_at','desc')->get();
          
          return view('one.ghars.index',compact('ghars')); 
        }

        public function create()
        {
          return view('one.ghars.create');
        }

            $asd->asd = $request->asd;
            $fas->fas = $request->fas;
            $df->df = $request->df;
            $asdf->asdf = $request->asdf;

        public function index()
        {
          $ghars = Ghar::orderBy('updated_at','desc')->get();
          
          return view('one.ghars.index',compact('ghars')); 
        }

        public function create()
        {
          return view('one.ghars.create');
        }adf
adg
df
gs
dfg
sdfg

            $asd->asd = $request->asd;
            $fas->fas = $request->fas;
            $df->df = $request->df;
            $asdf->asdf = $request->asdf;

        public function index()
        {
          $ghars = Ghar::orderBy('updated_at','desc')->get();
          
          return view('one.ghars.index',compact('ghars')); 
        }

        public function create()
        {
          return view('one.ghars.create');
        }        public function store(Request         $ghars->asd = $request->asd;<br>        $ghars->fas = $request->fas;<br>        $ghars->df = $request->df;<br>        $ghars->asdf = $request->asdf;<br>)
        {
           $this->validate(        $ghars->asd = $request->asd;<br>        $ghars->fas = $request->fas;<br>        $ghars->df = $request->df;<br>        $ghars->asdf = $request->asdf;<br>,[<br> .
           $validate . 
        
          ]);
          $ . Str::lower(Str::plural(ghar)) .  = new  . Str::ucfirst(Str::singular(ghar)) . ();
          <br> .
                  $ghars->asd = $request->asd;<br>        $ghars->fas = $request->fas;<br>        $ghars->df = $request->df;<br>        $ghars->asdf = $request->asdf;<br> .  
        
          if($ . Str::lower(Str::plural(ghar)) . ->save()){
              return redirect()->back()->with('success','  . Str::lower(Str::singular(ghar)) .  Added successfully.');
          }
          else{
              return redirect()->back()->with('unsuccess','Failed try again.');
          }
        
        }

            $asd->asd = $request->asd;
            $fas->fas = $request->fas;
            $df->df = $request->df;
            $asdf->asdf = $request->asdf;

        public function index()
        {
          $ghars = Ghar::orderBy('updated_at','desc')->get();
          
          return view('one.ghars.index',compact('ghars')); 
        }

        public function create()
        {
          return view('one.ghars.create');
        }        public function store(Request         $ghars->asd = $request->asd;<br>        $ghars->fas = $request->fas;<br>        $ghars->df = $request->df;<br>        $ghars->asdf = $request->asdf;<br>)
        {
           $this->validate(        $ghars->asd = $request->asd;<br>        $ghars->fas = $request->fas;<br>        $ghars->df = $request->df;<br>        $ghars->asdf = $request->asdf;<br>,
                         'asd'=>'required',<br>         'fas'=>'required',<br>         'df'=>'required',<br>         'asdf'=>'required',<br> 
          ]);
          $ghars  = new Ghar();
          <br> .
                  $ghars->asd = $request->asd;<br>        $ghars->fas = $request->fas;<br>        $ghars->df = $request->df;<br>        $ghars->asdf = $request->asdf;<br> .  
        
          if(ghars ->save()){
              return redirect()->back()->with('success',' Ghar Added successfully.');
          }
          else{
              return redirect()->back()->with('unsuccess','Failed try again.');
          }
        
        }

            $asd->asd = $request->asd;
            $fas->fas = $request->fas;
            $df->df = $request->df;
            $asdf->asdf = $request->asdf;

        public function index()
        {
          $ghars = Ghar::orderBy('updated_at','desc')->get();
          
          return view('one.ghars.index',compact('ghars')); 
        }

        public function create()
        {
          return view('one.ghars.create');
        }        public function store(Request $request)
        {
           $this->validate(        $ghars->asd = $request->asd;<br>        $ghars->fas = $request->fas;<br>        $ghars->df = $request->df;<br>        $ghars->asdf = $request->asdf;<br>,
                         'asd'=>'required',<br>         'fas'=>'required',<br>         'df'=>'required',<br>         'asdf'=>'required',<br> 
          ]);
          $ghars  = new Ghar();
          <br> .
                  $ghars->asd = $request->asd;<br>        $ghars->fas = $request->fas;<br>        $ghars->df = $request->df;<br>        $ghars->asdf = $request->asdf;<br> .  
        
          if(ghars ->save()){
              return redirect()->back()->with('success',' Ghar Added successfully.');
          }
          else{
              return redirect()->back()->with('unsuccess','Failed try again.');
          }
        
        }

            $asd->asd = $request->asd;
            $fas->fas = $request->fas;
            $df->df = $request->df;
            $asdf->asdf = $request->asdf;

        public function index()
        {
          $ghars = Ghar::orderBy('updated_at','desc')->get();
          
          return view('one.ghars.index',compact('ghars')); 
        }

        public function create()
        {
          return view('one.ghars.create');
        }        public function store(Request $request)
        {
           $this->validate($request,
                         'asd'=>'required',<br>         'fas'=>'required',<br>         'df'=>'required',<br>         'asdf'=>'required',<br> 
          ]);
          $ghars  = new Ghar();
          <br>
          $request 
        
          if(ghars ->save()){
              return redirect()->back()->with('success',' Ghar Added successfully.');
          }
          else{
              return redirect()->back()->with('unsuccess','Failed try again.');
          }
        
        }

            $asd->asd = $request->asd;
            $fas->fas = $request->fas;
            $df->df = $request->df;
            $asdf->asdf = $request->asdf;

        public function index()
        {
          $ghars = Ghar::orderBy('updated_at','desc')->get();
          
          return view('one.ghars.index',compact('ghars')); 
        }

        public function create()
        {
          return view('one.ghars.create');
        }        public function store(Request $request)
        {
           $this->validate($request,
                
                     'asd'=>'required',<br>
                     'fas'=>'required',<br>
                     'df'=>'required',<br>
                     'asdf'=>'required',<br> 
          ]);
          $ghars  = new Ghar();
          <br>
          
          if(ghars ->save()){
              return redirect()->back()->with('success',' Ghar Added successfully.');
          }
          else{
              return redirect()->back()->with('unsuccess','Failed try again.');
          }
        
        }

            $asd->asd = $request->asd;
            $fas->fas = $request->fas;
            $df->df = $request->df;
            $asdf->asdf = $request->asdf;

        public function index()
        {
          $ghars = Ghar::orderBy('updated_at','desc')->get();
          
          return view('one.ghars.index',compact('ghars')); 
        }

        public function create()
        {
          return view('one.ghars.create');
        }        public function store(Request $request)
        {
           $this->validate($request,
                
                     'asd'=>'required',<br>
                     'fas'=>'required',<br>
                     'df'=>'required',<br>
                     'asdf'=>'required',<br> 
          ]);
          $ghars  = new Ghar();
          <br>
          
                    $ghars->asd = $request->asd;<br>
                    $ghars->fas = $request->fas;<br>
                    $ghars->df = $request->df;<br>
                    $ghars->asdf = $request->asdf;<br>
          if(ghars ->save()){
              return redirect()->back()->with('success',' Ghar Added successfully.');
          }
          else{
              return redirect()->back()->with('unsuccess','Failed try again.');
          }
        
        }

            $asd->asd = $request->asd;
            $fas->fas = $request->fas;
            $df->df = $request->df;
            $asdf->asdf = $request->asdf;

        public function index()
        {
          $ghars = Ghar::orderBy('updated_at','desc')->get();
          
          return view('one.ghars.index',compact('ghars')); 
        }

        public function create()
        {
          return view('one.ghars.create');
        }        
        public function store(Request $request)
        {
           $this->validate($request,
                
                     'asd'=>'required',<br>
                     'fas'=>'required',<br>
                     'df'=>'required',<br>
                     'asdf'=>'required',<br> 
          ]);
          $ghars  = new Ghar();
          
                    $ghars->asd = $request->asd;<br>
                    $ghars->fas = $request->fas;<br>
                    $ghars->df = $request->df;<br>
                    $ghars->asdf = $request->asdf;<br>
          if($ghars ->save()){
              return redirect()->back()->with('success',' Ghar Added successfully.');
          }
          else{
              return redirect()->back()->with('unsuccess','Failed try again.');
          }
        
        }

            $asd->asd = $request->asd;
            $fas->fas = $request->fas;
            $df->df = $request->df;
            $asdf->asdf = $request->asdf;

        public function index()
        {
          $ghars = Ghar::orderBy('updated_at','desc')->get();
          
          return view('one.ghars.index',compact('ghars')); 
        }

        public function create()
        {
          return view('one.ghars.create');
        }        
        
        public function store(Request $request)
        {
           $this->validate($request,
                
                     'asd'=>'required',<br>
                     'fas'=>'required',<br>
                     'df'=>'required',<br>
                     'asdf'=>'required',<br> 
          ]);
          $ghars  = new Ghar();
          
                    $ghars->asd = $request->asd;<br>
                    $ghars->fas = $request->fas;<br>
                    $ghars->df = $request->df;<br>
                    $ghars->asdf = $request->asdf;<br>
          if($ghars ->save()){
              return redirect()->back()->with('success',' Ghar Added successfully.');
          }
          else{
              return redirect()->back()->with('unsuccess','Failed try again.');
          }
        
        }

            $asd->asd = $request->asd;
            $fas->fas = $request->fas;
            $df->df = $request->df;
            $asdf->asdf = $request->asdf;

        public function index()
        {
          $ghars = Ghar::orderBy('updated_at','desc')->get();
          
          return view('one.ghars.index',compact('ghars')); 
        }

        public function create()
        {
          return view('one.ghars.create');
        }        
        
        public function store(Request $request)
        {
           $this->validate($request,
                 
          ]);
          $ghars  = new Ghar();
          
          if($ghars ->save()){
              return redirect()->back()->with('success',' Ghar Added successfully.');
          }
          else{
              return redirect()->back()->with('unsuccess','Failed try again.');
          }
        
        }

            $asd->asd = $request->asd;
            $fas->fas = $request->fas;
            $df->df = $request->df;
            $asdf->asdf = $request->asdf;

        public function index()
        {
          $ghars = Ghar::orderBy('updated_at','desc')->get();
          
          return view('one.ghars.index',compact('ghars')); 
        }

        public function create()
        {
          return view('one.ghars.create');
        }        
        
        public function store(Request $request)
        {
           $this->validate($request,
                 
          ]);
          $ghars  = new Ghar();
          
          if($ghars ->save()){
              return redirect()->back()->with('success',' Ghar Added successfully.');
          }
          else{
              return redirect()->back()->with('unsuccess','Failed try again.');
          }
        
        }

            $asd->asd = $request->asd;
            $fas->fas = $request->fas;
            $df->df = $request->df;
            $asdf->asdf = $request->asdf;

        public function index()
        {
          $ghars = Ghar::orderBy('updated_at','desc')->get();
          
          return view('one.ghars.index',compact('ghars')); 
        }

        public function create()
        {
          return view('one.ghars.create');
        }        
        
        public function store(Request $request)
        {
           $this->validate($request,
                 
          ]);
          $ghars  = new Ghar();
          
          if($ghars ->save()){
              return redirect()->back()->with('success',' Ghar Added successfully.');
          }
          else{
              return redirect()->back()->with('unsuccess','Failed try again.');
          }
        
        }

            $asd->asd = $request->asd;
            $fas->fas = $request->fas;
            $df->df = $request->df;
            $asdf->asdf = $request->asdf;

        public function index()
        {
          $ghars = Ghar::orderBy('updated_at','desc')->get();
          
          return view('one.ghars.index',compact('ghars')); 
        }

        public function create()
        {
          return view('one.ghars.create');
        }        
        
        public function store(Request $request)
        {
           $this->validate($request,
                 
          ]);
          $ghars  = new Ghar();
          
          if($ghars ->save()){
              return redirect()->back()->with('success',' Ghar Added successfully.');
          }
          else{
              return redirect()->back()->with('unsuccess','Failed try again.');
          }
        
        }

            $asd->asd = $request->asd;
            $fas->fas = $request->fas;
            $df->df = $request->df;
            $asdf->asdf = $request->asdf;

        public function index()
        {
          $ghars = Ghar::orderBy('updated_at','desc')->get();
          
          return view('one.ghars.index',compact('ghars')); 
        }

        public function create()
        {
          return view('one.ghars.create');
        }        
        
        public function store(Request $request)
        {
           $this->validate($request,
                 
          ]);
          $ghars  = new Ghar();
          
          if($ghars ->save()){
              return redirect()->back()->with('success',' Ghar Added successfully.');
          }
          else{
              return redirect()->back()->with('unsuccess','Failed try again.');
          }
        
        }

            $asd->asd = $request->asd;
            $fas->fas = $request->fas;
            $df->df = $request->df;
            $asdf->asdf = $request->asdf;

        public function index()
        {
          $ghars = Ghar::orderBy('updated_at','desc')->get();
          
          return view('one.ghars.index',compact('ghars')); 
        }

        public function create()
        {
          return view('one.ghars.create');
        }        
        
        public function store(Request $request)
        {
           $this->validate($request,
                 
          ]);
          $ghars  = new Ghar();
          
          if($ghars ->save()){
              return redirect()->back()->with('success',' Ghar Added successfully.');
          }
          else{
              return redirect()->back()->with('unsuccess','Failed try again.');
          }
        
        }

            $asd->asd = $request->asd;
            $fas->fas = $request->fas;
            $df->df = $request->df;
            $asdf->asdf = $request->asdf;

        public function index()
        {
          $ghars = Ghar::orderBy('updated_at','desc')->get();
          
          return view('one.ghars.index',compact('ghars')); 
        }

        public function create()
        {
          return view('one.ghars.create');
        }        
        
        public function store(Request $request)
        {
           $this->validate($request,
                
                     'asd'=>'required',<br>
                     'fas'=>'required',<br>
                     'df'=>'required',<br>
                     'asdf'=>'required',<br> 
          ]);
          $ghars  = new Ghar();
          
                    $ghars->asd = $request->asd;<br>
                    $ghars->fas = $request->fas;<br>
                    $ghars->df = $request->df;<br>
                    $ghars->asdf = $request->asdf;<br>
          if($ghars ->save()){
              return redirect()->back()->with('success',' Ghar Added successfully.');
          }
          else{
              return redirect()->back()->with('unsuccess','Failed try again.');
          }
        
        }

            $asd->asd = $request->asd;
            $fas->fas = $request->fas;
            $df->df = $request->df;
            $asdf->asdf = $request->asdf;

        public function index()
        {
          $ghars = Ghar::orderBy('updated_at','desc')->get();
          
          return view('one.ghars.index',compact('ghars')); 
        }

        public function create()
        {
          return view('one.ghars.create');
        }        
        
        public function store(Request $request)
        {
           $this->validate($request,
                 
          ]);
          $ghars  = new Ghar();
          
          if($ghars ->save()){
              return redirect()->back()->with('success',' Ghar Added successfully.');
          }
          else{
              return redirect()->back()->with('unsuccess','Failed try again.');
          }
        
        }

            $asd->asd = $request->asd;
            $fas->fas = $request->fas;
            $df->df = $request->df;
            $asdf->asdf = $request->asdf;

        public function index()
        {
          $ghars = Ghar::orderBy('updated_at','desc')->get();
          
          return view('one.ghars.index',compact('ghars')); 
        }

        public function create()
        {
          return view('one.ghars.create');
        }        
        
        public function store(Request $request)
        {
           $this->validate($request,
                 
          ]);
          $ghars  = new Ghar();
          
          if($ghars ->save()){
              return redirect()->back()->with('success',' Ghar Added successfully.');
          }
          else{
              return redirect()->back()->with('unsuccess','Failed try again.');
          }
        
        }

            $asd->asd = $request->asd;
            $fas->fas = $request->fas;
            $df->df = $request->df;
            $asdf->asdf = $request->asdf;

        public function index()
        {
          $ghars = Ghar::orderBy('updated_at','desc')->get();
          
          return view('one.ghars.index',compact('ghars')); 
        }

        public function create()
        {
          return view('one.ghars.create');
        }        
        
        public function store(Request $request)
        {
           $this->validate($request,
                 
          ]);
          $ghars  = new Ghar();
          
          if($ghars ->save()){
              return redirect()->back()->with('success',' Ghar Added successfully.');
          }
          else{
              return redirect()->back()->with('unsuccess','Failed try again.');
          }
        
        }

            $asd->asd = $request->asd;
            $fas->fas = $request->fas;
            $df->df = $request->df;
            $asdf->asdf = $request->asdf;

        public function index()
        {
          $ghars = Ghar::orderBy('updated_at','desc')->get();
          
          return view('one.ghars.index',compact('ghars')); 
        }

        public function create()
        {
          return view('one.ghars.create');
        }        
        
        public function store(Request $request)
        {
           $this->validate($request,
                 
          ]);
          $ghars  = new Ghar();
          
          if($ghars ->save()){
              return redirect()->back()->with('success',' Ghar Added successfully.');
          }
          else{
              return redirect()->back()->with('unsuccess','Failed try again.');
          }
        
        }

            $asd->asd = $request->asd;
            $fas->fas = $request->fas;
            $df->df = $request->df;
            $asdf->asdf = $request->asdf;

        public function index()
        {
          $ghars = Ghar::orderBy('updated_at','desc')->get();
          
          return view('one.ghars.index',compact('ghars')); 
        }

        public function create()
        {
          return view('one.ghars.create');
        }        
        
        public function store(Request $request)
        {
           $this->validate($request,
                
                    'asd'=>'required',<br>
                    'df'=>'required',<br> 
          ]);
          $ghars  = new Ghar();
          
          if($ghars ->save()){
              return redirect()->back()->with('success',' Ghar Added successfully.');
          }
          else{
              return redirect()->back()->with('unsuccess','Failed try again.');
          }
        
        }

            $asd->asd = $request->asd;
            $fas->fas = $request->fas;
            $df->df = $request->df;
            $asdf->asdf = $request->asdf;

        public function index()
        {
          $ghars = Ghar::orderBy('updated_at','desc')->get();
          
          return view('one.ghars.index',compact('ghars')); 
        }

        public function create()
        {
          return view('one.ghars.create');
        }        
        
        public function store(Request $request)
        {
           $this->validate($request,
                
                    'asd'=>'required',<br>
                    'df'=>'required',<br> 
          ]);
          $ghars  = new Ghar();
          
                    $ghars->asd = $request->asd;<br>
                    $ghars->fas = $request->fas;<br>
                    $ghars->df = $request->df;<br>
                    $ghars->asdf = $request->asdf;<br>
          if($ghars ->save()){
              return redirect()->back()->with('success',' Ghar Added successfully.');
          }
          else{
              return redirect()->back()->with('unsuccess','Failed try again.');
          }
        
        }

            $asd->asd = $request->asd;
            $fas->fas = $request->fas;
            $df->df = $request->df;
            $asdf->asdf = $request->asdf;

        public function index()
        {
          $ghars = Ghar::orderBy('updated_at','desc')->get();
          
          return view('one.ghars.index',compact('ghars')); 
        }

        public function create()
        {
          return view('one.ghars.create');
        }        
        
        public function store(Request $request)
        {
           $this->validate($request,
                
                    'asd'=>'required',<br>
                    'df'=>'required',<br> 
          ]);
          $ghars  = new Ghar();
          
                    $ghars->asd = $request->asd;<br>
                    $ghars->fas = $request->fas;<br>
                    $ghars->df = $request->df;<br>
                    $ghars->asdf = $request->asdf;<br>
          if($ghars ->save()){
              return redirect()->back()->with('success',' Ghar Added successfully.');
          }
          else{
              return redirect()->back()->with('unsuccess','Failed try again.');
          }
        
        }

            $asd->asd = $request->asd;
            $fas->fas = $request->fas;
            $df->df = $request->df;
            $asdf->asdf = $request->asdf;

        public function index()
        {
          $ghars = Ghar::orderBy('updated_at','desc')->get();
          
          return view('one.ghars.index',compact('ghars')); 
        }

        public function create()
        {
          return view('one.ghars.create');
        }        
        
        public function store(Request $request)
        {
           $this->validate($request,
                
                    'asd'=>'required',<br>getting file
                    'df'=>'required',<br> 
          ]);
          $ghars  = new Ghar();
          
                    $ghars->asd = $request->asd;<br>
                    $ghars->df = $request->df;<br>
                    $ghars->asdf = $request->asdf;<br>
          if($ghars ->save()){
              return redirect()->back()->with('success',' Ghar Added successfully.');
          }
          else{
              return redirect()->back()->with('unsuccess','Failed try again.');
          }
        
        }

            $asd->asd = $request->asd;
            $fas->fas = $request->fas;
            $df->df = $request->df;
            $asdf->asdf = $request->asdf;

        public function index()
        {
          $ghars = Ghar::orderBy('updated_at','desc')->get();
          
          return view('one.ghars.index',compact('ghars')); 
        }

        public function create()
        {
          return view('one.ghars.create');
        }        
        
        public function store(Request $request)
        {
           $this->validate($request,
                
                    'asd'=>'required',<br>
                    'df'=>'required',<br> 
          ]);
          $ghars  = new Ghar();
          
                    $ghars->asd = $request->asd;<br>getting file
                    $ghars->df = $request->df;<br>
                    $ghars->asdf = $request->asdf;<br>
          if($ghars ->save()){
              return redirect()->back()->with('success',' Ghar Added successfully.');
          }
          else{
              return redirect()->back()->with('unsuccess','Failed try again.');
          }
        
        }

            $asd->asd = $request->asd;
            $fas->fas = $request->fas;
            $df->df = $request->df;
            $asdf->asdf = $request->asdf;

        public function index()
        {
          $ghars = Ghar::orderBy('updated_at','desc')->get();
          
          return view('one.ghars.index',compact('ghars')); 
        }

        public function create()
        {
          return view('one.ghars.create');
        }        
        
        public function store(Request $request)
        {
           $this->validate($request,
                
                    'asd'=>'required',<br>
                    'df'=>'required',<br> 
          ]);
          $ghars  = new Ghar();
          
                    $ghars->asd = $request->asd;<br>
                    $ghars->df = $request->df;<br>
                    $ghars->asdf = $request->asdf;<br>
          if($ghars ->save()){
              return redirect()->back()->with('success',' Ghar Added successfully.');
          }
          else{
              return redirect()->back()->with('unsuccess','Failed try again.');
          }
        
        }

            $asd->asd = $request->asd;
            $fas->fas = $request->fas;
            $df->df = $request->df;
            $asdf->asdf = $request->asdf;

        public function index()
        {
          $ghars = Ghar::orderBy('updated_at','desc')->get();
          
          return view('one.ghars.index',compact('ghars')); 
        }

        public function create()
        {
          return view('one.ghars.create');
        }        
        
        public function store(Request $request)
        {
           $this->validate($request,
                
                    'asd'=>'required',<br>
                    'df'=>'required',<br> 
          ]);
          $ghars  = new Ghar();
          
                    $ghars->asd = $request->asd;<br>
              
                if($request->file('fas')) {
                    $upload = $request->file('fas');
                    $fileformat = time().$upload->getClientOriginalName();
                    if ($upload->move('uploads/ghar/', $fileformat)) {
                        $ghar->fas = $fileformat;
                    }
                }
                    $ghars->df = $request->df;<br>
                    $ghars->asdf = $request->asdf;<br>
          if($ghars ->save()){
              return redirect()->back()->with('success',' Ghar Added successfully.');
          }
          else{
              return redirect()->back()->with('unsuccess','Failed try again.');
          }
        
        }

            $asd->asd = $request->asd;
            $fas->fas = $request->fas;
            $df->df = $request->df;
            $asdf->asdf = $request->asdf;

        public function index()
        {
          $ghars = Ghar::orderBy('updated_at','desc')->get();
          
          return view('one.ghars.index',compact('ghars')); 
        }

        public function create()
        {
          return view('one.ghars.create');
        }        
        
        public function store(Request $request)
        {
           $this->validate($request,
                 
          ]);
          $ghars  = new Ghar();
          
                $ghars->asdf = $request->asdf;<br>
          if($ghars ->save()){
              return redirect()->back()->with('success',' Ghar Added successfully.');
          }
          else{
              return redirect()->back()->with('unsuccess','Failed try again.');
          }
        
        }

            $asd->asd = $request->asd;
            $fas->fas = $request->fas;
            $df->df = $request->df;
            $asdf->asdf = $request->asdf;

        public function index()
        {
          $ghars = Ghar::orderBy('updated_at','desc')->get();
          
          return view('one.ghars.index',compact('ghars')); 
        }

        public function create()
        {
          return view('one.ghars.create');
        }        
        
        public function store(Request $request)
        {
           $this->validate($request,
                 
          ]);
          $ghars  = new Ghar();
          
                $ghars->asdf = $request->asdf;<br>
          if($ghars ->save()){
              return redirect()->back()->with('success',' Ghar Added successfully.');
          }
          else{
              return redirect()->back()->with('unsuccess','Failed try again.');
          }
        
        }

            $asd->asd = $request->asd;
            $fas->fas = $request->fas;
            $df->df = $request->df;
            $asdf->asdf = $request->asdf;

        public function index()
        {
          $ghars = Ghar::orderBy('updated_at','desc')->get();
          
          return view('one.ghars.index',compact('ghars')); 
        }

        public function create()
        {
          return view('one.ghars.create');
        }        
        
        public function store(Request $request)
        {
           $this->validate($request,
                
            'asd'=>'required',<br>
            'df'=>'required',<br> 
          ]);
          $ghars  = new Ghar();
          
                $ghars->asd = $request->asd;<br>
        if($request->file('fas')) {
            $upload = $request->file('fas');
            $fileformat = time().$upload->getClientOriginalName();
            if ($upload->move('uploads/ghar/', $fileformat)) {
                $ghar->fas = $fileformat;
            }
        }

                $ghars->df = $request->df;<br>
                $ghars->asdf = $request->asdf;<br>
          if($ghars ->save()){
              return redirect()->back()->with('success',' Ghar Added successfully.');
          }
          else{
              return redirect()->back()->with('unsuccess','Failed try again.');
          }
        
        }

            $asd->asd = $request->asd;
            $fas->fas = $request->fas;
            $df->df = $request->df;
            $asdf->asdf = $request->asdf;

        public function index()
        {
          $ghars = Ghar::orderBy('updated_at','desc')->get();
          
          return view('one.ghars.index',compact('ghars')); 
        }

        public function create()
        {
          return view('one.ghars.create');
        }        
        
        public function store(Request $request)
        {
           $this->validate($request,
                
            'asd'=>'required',<br>
            'df'=>'required',<br> 
          ]);
          $ghars  = new Ghar();
          
                $ghars->asd = $request->asd;<br>
        if($request->file('fas')) {
            $upload = $request->file('fas');
            $fileformat = time().$upload->getClientOriginalName();
            if ($upload->move('uploads/ghar/', $fileformat)) {
                $ghar->fas = $fileformat;
            }
        }

                $ghars->df = $request->df;<br>
                $ghars->asdf = $request->asdf;<br>
          if($ghars ->save()){
              return redirect()->back()->with('success',' Ghar Added successfully.');
          }
          else{
              return redirect()->back()->with('unsuccess','Failed try again.');
          }
        
        }        public function show($id)
        {
          $ghars = Ghar::findOrFail($id);
          return view('one.ghars.show',compact('ghars'));
        };

            $asd->asd = $request->asd;
            $fas->fas = $request->fas;
            $df->df = $request->df;
            $asdf->asdf = $request->asdf;

        public function index()
        {
          $ghars = Ghar::orderBy('updated_at','desc')->get();
          
          return view('one.ghars.index',compact('ghars')); 
        }

        public function create()
        {
          return view('one.ghars.create');
        }        
        
        public function store(Request $request)
        {
           $this->validate($request,
                
            'asd'=>'required',<br>
            'df'=>'required',<br> 
          ]);
          $ghars  = new Ghar();
          
                $ghars->asd = $request->asd;<br>
        if($request->file('fas')) {
            $upload = $request->file('fas');
            $fileformat = time().$upload->getClientOriginalName();
            if ($upload->move('uploads/ghar/', $fileformat)) {
                $ghar->fas = $fileformat;
            }
        }

                $ghars->df = $request->df;<br>
                $ghars->asdf = $request->asdf;<br>
          if($ghars ->save()){
              return redirect()->back()->with('success',' Ghar Added successfully.');
          }
          else{
              return redirect()->back()->with('unsuccess','Failed try again.');
          }
        
        }

        public function show($id)
        {
          $ghars = Ghar::findOrFail($id);
          return view('one.ghars.show',compact('ghars'));
        };        public function edit($id)
        {
            $ghars = Ghar::findOrFail($id);
            return view('one.ghars.edit',compact('ghars'));
        }

            $asd->asd = $request->asd;
            $fas->fas = $request->fas;
            $df->df = $request->df;
            $asdf->asdf = $request->asdf;

        public function index()
        {
          $ghars = Ghar::orderBy('updated_at','desc')->get();
          
          return view('one.ghars.index',compact('ghars')); 
        }

        public function create()
        {
          return view('one.ghars.create');
        }        
        
        public function store(Request $request)
        {
           $this->validate($request,
                
            'asd'=>'required',<br>
            'df'=>'required',<br> 
          ]);
          $ghars  = new Ghar();
          
                $ghars->asd = $request->asd;<br>
        if($request->file('fas')) {
            $upload = $request->file('fas');
            $fileformat = time().$upload->getClientOriginalName();
            if ($upload->move('uploads/ghar/', $fileformat)) {
                $ghar->fas = $fileformat;
            }
        }

                $ghars->df = $request->df;<br>
                $ghars->asdf = $request->asdf;<br>
          if($ghars ->save()){
              return redirect()->back()->with('success',' Ghar Added successfully.');
          }
          else{
              return redirect()->back()->with('unsuccess','Failed try again.');
          }
        
        }

        public function show($id)
        {
          $ghars = Ghar::findOrFail($id);
          return view('one.ghars.show',compact('ghars'));
        };

        public function edit($id)
        {
            $ghars = Ghar::findOrFail($id);
            return view('one.ghars.edit',compact('ghars'));
        }        
        
        public function update(Request $request, $id)
        {
            $this->validate($request,[ 
                
            'asd'=>'required',<br>
            'df'=>'required',<br> 
            ]);

            $ghars = Ghar::findOrFail($id);
                
                $ghars->asd = $request->asd;<br>
        if($request->file('fas')) {
            $upload = $request->file('fas');
            $fileformat = time().$upload->getClientOriginalName();
            if ($upload->move('uploads/ghar/', $fileformat)) {
                $ghar->fas = $fileformat;
            }
        }

                $ghars->df = $request->df;<br>
                $ghars->asdf = $request->asdf;<br>

            if($ghars ->update()){
                return redirect()->back()->with('success','  ghars  Added successfully.');
            }
            else{
                return redirect()->back()->with('unsuccess','Failed try again.');
            }
            
        }

            $asd->asd = $request->asd;
            $fas->fas = $request->fas;
            $df->df = $request->df;
            $asdf->asdf = $request->asdf;

        public function index()
        {
          $ghars = Ghar::orderBy('updated_at','desc')->get();
          
          return view('one.ghars.index',compact('ghars')); 
        }

        public function create()
        {
          return view('one.ghars.create');
        }        
        
        public function store(Request $request)
        {
           $this->validate($request,
                
            'asd'=>'required',<br>
            'df'=>'required',<br> 
          ]);
          $ghars  = new Ghar();
          
                $ghars->asd = $request->asd;<br>
        if($request->file('fas')) {
            $upload = $request->file('fas');
            $fileformat = time().$upload->getClientOriginalName();
            if ($upload->move('uploads/ghars/', $fileformat)) {
                $ghars->fas = $fileformat;
            }
        }

                $ghars->df = $request->df;<br>
                $ghars->asdf = $request->asdf;<br>
          if($ghars ->save()){
              return redirect()->back()->with('success',' Ghar Added successfully.');
          }
          else{
              return redirect()->back()->with('unsuccess','Failed try again.');
          }
        
        }

        public function show($id)
        {
          $ghars = Ghar::findOrFail($id);
          return view('one.ghars.show',compact('ghars'));
        };

        public function edit($id)
        {
            $ghars = Ghar::findOrFail($id);
            return view('one.ghars.edit',compact('ghars'));
        }        
        
        public function update(Request $request, $id)
        {
            $this->validate($request,[ 
                
            'asd'=>'required',<br>
            'df'=>'required',<br> 
            ]);

            $ghars = Ghar::findOrFail($id);
                
                $ghars->asd = $request->asd;<br>
        if($request->file('fas')) {
            $upload = $request->file('fas');
            $fileformat = time().$upload->getClientOriginalName();
            if ($upload->move('uploads/ghars/', $fileformat)) {
                $ghars->fas = $fileformat;
            }
        }

                $ghars->df = $request->df;<br>
                $ghars->asdf = $request->asdf;<br>

            if($ghars ->update()){
                return redirect()->back()->with('success','  ghars  Added successfully.');
            }
            else{
                return redirect()->back()->with('unsuccess','Failed try again.');
            }
            
        }        
        
        public function destroy($id)
{
  $ghars = Ghar::findOrFail($id);
            if($ghars->fas !=="no-image.png"){
            unlink('uploads/ghars/'.$ghars->fas );
        } 
  if( Ghar::where('id',$id)->delete()){
   return redirect()->back()->with('success','  ghars  deleted successfully.');
  }
  else{
      return redirect()->back()->with('unsuccess','Failed try again.');
  }
}


            $asd->asd = $request->asd;
            $fas->fas = $request->fas;
            $df->df = $request->df;
            $asdf->asdf = $request->asdf;

        public function index()
        {
          $ghars = Ghar::orderBy('updated_at','desc')->get();
          
          return view('one.ghars.index',compact('ghars')); 
        }

        public function create()
        {
          return view('one.ghars.create');
        }        
        
        public function store(Request $request)
        {
           $this->validate($request,
                
            'asd'=>'required',<br>
            'df'=>'required',<br> 
          ]);
          $ghars  = new Ghar();
          
                $ghars->asd = $request->asd;<br>
        if($request->file('fas')) {
            $upload = $request->file('fas');
            $fileformat = time().$upload->getClientOriginalName();
            if ($upload->move('uploads/ghars/', $fileformat)) {
                $ghars->fas = $fileformat;
            }
        }

                $ghars->df = $request->df;<br>
                $ghars->asdf = $request->asdf;<br>
          if($ghars ->save()){
              return redirect()->back()->with('success',' Ghar Added successfully.');
          }
          else{
              return redirect()->back()->with('unsuccess','Failed try again.');
          }
        
        }

        public function show($id)
        {
          $ghars = Ghar::findOrFail($id);
          return view('one.ghars.show',compact('ghars'));
        };

        public function edit($id)
        {
            $ghars = Ghar::findOrFail($id);
            return view('one.ghars.edit',compact('ghars'));
        }        
        
        public function update(Request $request, $id)
        {
            $this->validate($request,[ 
                
            'asd'=>'required',<br>
            'df'=>'required',<br> 
            ]);

            $ghars = Ghar::findOrFail($id);
                
                $ghars->asd = $request->asd;<br>
        if($request->file('fas')) {
            $upload = $request->file('fas');
            $fileformat = time().$upload->getClientOriginalName();
            if ($upload->move('uploads/ghars/', $fileformat)) {
                $ghars->fas = $fileformat;
            }
        }

                $ghars->df = $request->df;<br>
                $ghars->asdf = $request->asdf;<br>

            if($ghars ->update()){
                return redirect()->back()->with('success','  ghars  Added successfully.');
            }
            else{
                return redirect()->back()->with('unsuccess','Failed try again.');
            }
            
        }        
        
        public function destroy($id)
{
  $ghars = Ghar::findOrFail($id);
            if($ghars->fas !=="no-image.png"){
            unlink('uploads/ghars/'.$ghars->fas );
        } 
  if( Ghar::where('id',$id)->delete()){
   return redirect()->back()->with('success','  ghars  deleted successfully.');
  }
  else{
      return redirect()->back()->with('unsuccess','Failed try again.');
  }
}


            $asd->asd = $request->asd;
            $fas->fas = $request->fas;
            $df->df = $request->df;
            $asdf->asdf = $request->asdf;

        public function index()
        {
          $ghars = Ghar::orderBy('updated_at','desc')->get();
          
          return view('one.ghars.index',compact('ghars')); 
        }

        public function create()
        {
          return view('one.ghars.create');
        }        
        
        public function store(Request $request)
        {
           $this->validate($request,
                
            'asd'=>'required',<br>
            'df'=>'required',<br> 
          ]);
          $ghars  = new Ghar();
          
                $ghars->asd = $request->asd;<br>
        if($request->file('fas')) {
            $upload = $request->file('fas');
            $fileformat = time().$upload->getClientOriginalName();
            if ($upload->move('uploads/ghars/', $fileformat)) {
                $ghars->fas = $fileformat;
            }
        }

                $ghars->df = $request->df;<br>
                $ghars->asdf = $request->asdf;<br>
          if($ghars ->save()){
              return redirect()->back()->with('success',' Ghar Added successfully.');
          }
          else{
              return redirect()->back()->with('unsuccess','Failed try again.');
          }
        
        }

        public function show($id)
        {
          $ghars = Ghar::findOrFail($id);
          return view('one.ghars.show',compact('ghars'));
        };

        public function edit($id)
        {
            $ghars = Ghar::findOrFail($id);
            return view('one.ghars.edit',compact('ghars'));
        }        
        
        public function update(Request $request, $id)
        {
            $this->validate($request,[ 
                
            'asd'=>'required',<br>
            'df'=>'required',<br> 
            ]);

            $ghars = Ghar::findOrFail($id);
                
                $ghars->asd = $request->asd;<br>
        if($request->file('fas')) {
            $upload = $request->file('fas');
            $fileformat = time().$upload->getClientOriginalName();
            if ($upload->move('uploads/ghars/', $fileformat)) {
                $ghars->fas = $fileformat;
            }
        }

                $ghars->df = $request->df;<br>
                $ghars->asdf = $request->asdf;<br>

            if($ghars ->update()){
                return redirect()->back()->with('success','  ghars  Added successfully.');
            }
            else{
                return redirect()->back()->with('unsuccess','Failed try again.');
            }
            
        }        
        
        public function destroy($id)
{
  $ghars = Ghar::findOrFail($id);
            if($ghars->fas !=="no-image.png"){
            unlink('uploads/ghars/'.$ghars->fas );
        } 
  if( Ghar::where('id',$id)->delete()){
   return redirect()->back()->with('success','  ghars  deleted successfully.');
  }
  else{
      return redirect()->back()->with('unsuccess','Failed try again.');
  }
}


            $asd->asd = $request->asd;
            $fas->fas = $request->fas;
            $df->df = $request->df;
            $asdf->asdf = $request->asdf;

        public function index()
        {
          $ghars = Ghar::orderBy('updated_at','desc')->get();
          
          return view('one.ghars.index',compact('ghars')); 
        }

        public function create()
        {
          return view('one.ghars.create');
        }        
        
        public function store(Request $request)
        {
           $this->validate($request,
                
            'asd'=>'required',<br>
            'df'=>'required',<br> 
          ]);
          $ghars  = new Ghar();
          
                $ghars->asd = $request->asd;<br>
        if($request->file('fas')) {
            $upload = $request->file('fas');
            $fileformat = time().$upload->getClientOriginalName();
            if ($upload->move('uploads/ghars/', $fileformat)) {
                $ghars->fas = $fileformat;
            }
        }

                $ghars->df = $request->df;<br>
                $ghars->asdf = $request->asdf;<br>
          if($ghars ->save()){
              return redirect()->back()->with('success',' Ghar Added successfully.');
          }
          else{
              return redirect()->back()->with('unsuccess','Failed try again.');
          }
        
        }

        public function show($id)
        {
          $ghars = Ghar::findOrFail($id);
          return view('one.ghars.show',compact('ghars'));
        };

        public function edit($id)
        {
            $ghars = Ghar::findOrFail($id);
            return view('one.ghars.edit',compact('ghars'));
        }        
        
        public function update(Request $request, $id)
        {
            $this->validate($request,[ 
                
            'asd'=>'required',<br>
            'df'=>'required',<br> 
            ]);

            $ghars = Ghar::findOrFail($id);
                
                $ghars->asd = $request->asd;<br>
        if($request->file('fas')) {
            $upload = $request->file('fas');
            $fileformat = time().$upload->getClientOriginalName();
            if ($upload->move('uploads/ghars/', $fileformat)) {
                $ghars->fas = $fileformat;
            }
        }

                $ghars->df = $request->df;<br>
                $ghars->asdf = $request->asdf;<br>

            if($ghars ->update()){
                return redirect()->back()->with('success','  ghars  Added successfully.');
            }
            else{
                return redirect()->back()->with('unsuccess','Failed try again.');
            }
            
        }        
        
        public function destroy($id)
{
  $ghars = Ghar::findOrFail($id);
            if($ghars->fas !=="no-image.png"){
            unlink('uploads/ghars/'.$ghars->fas );
        } 
  if( Ghar::where('id',$id)->delete()){
   return redirect()->back()->with('success','  ghars  deleted successfully.');
  }
  else{
      return redirect()->back()->with('unsuccess','Failed try again.');
  }
}


            $asd->asd = $request->asd;
            $fas->fas = $request->fas;
            $df->df = $request->df;
            $asdf->asdf = $request->asdf;

        public function index()
        {
          $ghars = Ghar::orderBy('updated_at','desc')->get();
          
          return view('one.ghars.index',compact('ghars')); 
        }

        public function create()
        {
          return view('one.ghars.create');
        }        
        
        public function store(Request $request)
        {
           $this->validate($request,
                
            'asd'=>'required',<br>
            'df'=>'required',<br> 
          ]);
          $ghars  = new Ghar();
          
                $ghars->asd = $request->asd;<br>
        if($request->file('fas')) {
            $upload = $request->file('fas');
            $fileformat = time().$upload->getClientOriginalName();
            if ($upload->move('uploads/ghars/', $fileformat)) {
                $ghars->fas = $fileformat;
            }
        }

                $ghars->df = $request->df;<br>
                $ghars->asdf = $request->asdf;<br>
          if($ghars ->save()){
              return redirect()->back()->with('success',' Ghar Added successfully.');
          }
          else{
              return redirect()->back()->with('unsuccess','Failed try again.');
          }
        
        }

        public function show($id)
        {
          $ghars = Ghar::findOrFail($id);
          return view('one.ghars.show',compact('ghars'));
        };

        public function edit($id)
        {
            $ghars = Ghar::findOrFail($id);
            return view('one.ghars.edit',compact('ghars'));
        }        
        
        public function update(Request $request, $id)
        {
            $this->validate($request,[ 
                
            'asd'=>'required',<br>
            'df'=>'required',<br> 
            ]);

            $ghars = Ghar::findOrFail($id);
                
                $ghars->asd = $request->asd;<br>
        if($request->file('fas')) {
            $upload = $request->file('fas');
            $fileformat = time().$upload->getClientOriginalName();
            if ($upload->move('uploads/ghars/', $fileformat)) {
                $ghars->fas = $fileformat;
            }
        }

                $ghars->df = $request->df;<br>
                $ghars->asdf = $request->asdf;<br>

            if($ghars ->update()){
                return redirect()->back()->with('success','  ghars  Added successfully.');
            }
            else{
                return redirect()->back()->with('unsuccess','Failed try again.');
            }
            
        }        
        
        public function destroy($id)
{
  $ghars = Ghar::findOrFail($id);
            if($ghars->fas !=="no-image.png"){
            unlink('uploads/ghars/'.$ghars->fas );
        } 
  if( Ghar::where('id',$id)->delete()){
   return redirect()->back()->with('success','  ghars  deleted successfully.');
  }
  else{
      return redirect()->back()->with('unsuccess','Failed try again.');
  }
}

        <div class="box-header">;
          <div class="row mt-3">;
              <div class="col-md-6">;
                  <h3 class="box-title text-color">;Slide Images</h3>;

              </div>;
              <div class="col-md-6 text-right">;
                  <a href="{{route('Str::lower(Str::plural(as)).create')}}" class="btn btn-sm px-4 btn-custom">;<i class="fa fa-plus">;</i>;&nbsp; Add new Image</a>;

              </div>;
          </div>;
       </div>;
       <div class="box-body">;
            <table id="table_id" class="table display responsive nowrap" width="100%">;
                <thead>;
                      <tr>;
                      <th>;SR NO</th>;<br>
                      <th> dfa</th><br><th> sfd</th><br><th> asf</th><br>
                      <th>;Action</th>;
                      </tr>;
                </thead>;
                <tbody>;
                      <?php $i=1;?>;
                  @foreach($Str::lower(Str::plural(as)) as $Str::lower(Str::singular(as)))
                      <tr>;
                      <td>;{{$i}}</td>;<br>
                      
                      <td>{{$a->dfa}}</td><br><td>{{$a->sfd}}</td><br><td>{{$a->asf}}</td><br>

                      <td>;
                          <div class="row">;
                              <div class="col-md-2">;
                                  <a href="{{route('Str::lower(Str::plural(as)).edit',$Str::lower(Str::singular(as))->id)}}" class=" " style="margin-left: 5px;">;<i class="fa fa-edit icon fa-1x">;</i>; </a>;

                              </div>;
                              <div class="col-md-2">;
                                  <form action="{{ route('Str::lower(Str::plural(as)).destroy',$Str::lower(Str::singular(as))->id)}}" method="POST">;
                                      @csrf
                                      @method('DELETE')
                                      <button type="submit"  class="" style="margin-left: 5px;">;
                                          <i class="fa fa-trash icon fa-1x">;</i>;</button>;
                                  </form>;
                              </div>;
                              <div class="col-md-2">;
                                  <a href="{{route('Str::lower(Str::plural(as)).show',$Str::lower(Str::singular(as))->id)}}" style="margin-left: 5px;" class="icon">;<i class="fa fa-eye  fa-1x" >;</i>;&ensp;</span>;</a>;

                              </div>;
                          </div>;
                      </td>;
                      </tr>;
                  <?php $i++?>;
                  @endforeach
                </tbody>;
            </table>;
        </div>;

        <div class="box-header">;
          <div class="row mt-3">;
              <div class="col-md-6">;
                  <h3 class="box-title text-color">;Slide Images</h3>;

              </div>;
              <div class="col-md-6 text-right">;
                  <a href="{{route('as.create')}}" class="btn btn-sm px-4 btn-custom">;<i class="fa fa-plus">;</i>;&nbsp; Add new Image</a>;

              </div>;
          </div>;
       </div>;
       <div class="box-body">;
            <table id="table_id" class="table display responsive nowrap" width="100%">;
                <thead>;
                      <tr>;
                      <th>;SR NO</th>;<br>
                      <th> dfa</th><br><th> sfd</th><br><th> asf</th><br>
                      <th>;Action</th>;
                      </tr>;
                </thead>;
                <tbody>;
                      <?php $i=1;?>;
                  @foreach($as as $a)
                      <tr>;
                      <td>;{{$i}}</td>;<br>
                      
                      <td>{{$a->dfa}}</td><br><td>{{$a->sfd}}</td><br><td>{{$a->asf}}</td><br>

                      <td>;
                          <div class="row">;
                              <div class="col-md-2">;
                                  <a href="{{route('as.edit',$a ->id)}}" class=" " style="margin-left: 5px;">;<i class="fa fa-edit icon fa-1x">;</i>; </a>;

                              </div>;
                              <div class="col-md-2">;
                                  <form action="{{ route('as.destroy',$a ->id)}}" method="POST">;
                                      @csrf
                                      @method('DELETE')
                                      <button type="submit"  class="" style="margin-left: 5px;">;
                                          <i class="fa fa-trash icon fa-1x">;</i>;</button>;
                                  </form>;
                              </div>;
                              <div class="col-md-2">;
                                  <a href="{{route('as.show',$a ->id)}}" style="margin-left: 5px;" class="icon">;<i class="fa fa-eye  fa-1x" >;</i>;&ensp;</span>;</a>;

                              </div>;
                          </div>;
                      </td>;
                      </tr>;
                  <?php $i++?>;
                  @endforeach
                </tbody>;
            </table>;
        </div>;

        <div class="box-header">;
          <div class="row mt-3">;
              <div class="col-md-6">;
                  <h3 class="box-title text-color">;Slide Images</h3>;

              </div>;
              <div class="col-md-6 text-right">;
                  <a href="{{route('as.create')}}" class="btn btn-sm px-4 btn-custom">;<i class="fa fa-plus">;</i>;&nbsp; Add new Image</a>;

              </div>;
          </div>;
       </div>;
       <div class="box-body">;
            <table id="table_id" class="table display responsive nowrap" width="100%">;
                <thead>;
                      <tr>;
                      <th>;SR NO</th>;<br>
                      <th> dfa</th><br>
                      <th>;Action</th>;
                      </tr>;
                </thead>;
                <tbody>;
                      <?php $i=1;?>;
                  @foreach($as as $a)
                      <tr>;
                      <td>;{{$i}}</td>;<br>
                      
                      <td>{{$a->dfa}}</td><br>

                      <td>;
                          <div class="row">;
                              <div class="col-md-2">;
                                  <a href="{{route('as.edit',$a ->id)}}" class=" " style="margin-left: 5px;">;<i class="fa fa-edit icon fa-1x">;</i>; </a>;

                              </div>;
                              <div class="col-md-2">;
                                  <form action="{{ route('as.destroy',$a ->id)}}" method="POST">;
                                      @csrf
                                      @method('DELETE')
                                      <button type="submit"  class="" style="margin-left: 5px;">;
                                          <i class="fa fa-trash icon fa-1x">;</i>;</button>;
                                  </form>;
                              </div>;
                              <div class="col-md-2">;
                                  <a href="{{route('as.show',$a ->id)}}" style="margin-left: 5px;" class="icon">;<i class="fa fa-eye  fa-1x" >;</i>;&ensp;</span>;</a>;

                              </div>;
                          </div>;
                      </td>;
                      </tr>;
                  <?php $i++?>;
                  @endforeach
                </tbody>;
            </table>;
        </div>;

        <div class="box-header">;
          <div class="row mt-3">;
              <div class="col-md-6">;
                  <h3 class="box-title text-color">;Slide Images</h3>;

              </div>;
              <div class="col-md-6 text-right">;
                  <a href="{{route('msfs.create')}}" class="btn btn-sm px-4 btn-custom">;<i class="fa fa-plus">;</i>;&nbsp; Add new Image</a>;

              </div>;
          </div>;
       </div>;
       <div class="box-body">;
            <table id="table_id" class="table display responsive nowrap" width="100%">;
                <thead>;
                      <tr>;
                      <th>;SR NO</th>;<br>
                      <th> dfaasdf</th><br><th> as</th><br><th> df</th><br>
                      <th>;Action</th>;
                      </tr>;
                </thead>;
                <tbody>;
                      <?php $i=1;?>;
                  @foreach($msfs as $msf)
                      <tr>;
                      <td>;{{$i}}</td>;<br>
                      
                      <td>{{$msf->dfaasdf}}</td><br><td>{{$msf->as}}</td><br><td>{{$msf->df}}</td><br>

                      <td>;
                          <div class="row">;
                              <div class="col-md-2">;
                                  <a href="{{route('msfs.edit',$msf ->id)}}" class=" " style="margin-left: 5px;">;<i class="fa fa-edit icon fa-1x">;</i>; </a>;

                              </div>;
                              <div class="col-md-2">;
                                  <form action="{{ route('msfs.destroy',$msf ->id)}}" method="POST">;
                                      @csrf
                                      @method('DELETE')
                                      <button type="submit"  class="" style="margin-left: 5px;">;
                                          <i class="fa fa-trash icon fa-1x">;</i>;</button>;
                                  </form>;
                              </div>;
                              <div class="col-md-2">;
                                  <a href="{{route('msfs.show',$msf ->id)}}" style="margin-left: 5px;" class="icon">;<i class="fa fa-eye  fa-1x" >;</i>;&ensp;</span>;</a>;

                              </div>;
                          </div>;
                      </td>;
                      </tr>;
                  <?php $i++?>;
                  @endforeach
                </tbody>;
            </table>;
        </div>;

        &lt;div class="box-header"&gt;;
          <div class="row mt-3">;
              <div class="col-md-6">;
                  <h3 class="box-title text-color">;Slide Images</h3>;

              </div>;
              <div class="col-md-6 text-right">;
                  <a href="{{route('msfs.create')}}" class="btn btn-sm px-4 btn-custom">;<i class="fa fa-plus">;</i>;&nbsp; Add new Image</a>;

              </div>;
          </div>;
       </div>;
       <div class="box-body">;
            <table id="table_id" class="table display responsive nowrap" width="100%">;
                <thead>;
                      <tr>;
                      <th>;SR NO</th>;<br>
                      <th> dfaasdf</th><br><th> as</th><br><th> df</th><br>
                      <th>;Action</th>;
                      </tr>;
                </thead>;
                <tbody>;
                      <?php $i=1;?>;
                  @foreach($msfs as $msf)
                      <tr>;
                      <td>;{{$i}}</td>;<br>
                      
                      <td>{{$msf->dfaasdf}}</td><br><td>{{$msf->as}}</td><br><td>{{$msf->df}}</td><br>

                      <td>;
                          <div class="row">;
                              <div class="col-md-2">;
                                  <a href="{{route('msfs.edit',$msf ->id)}}" class=" " style="margin-left: 5px;">;<i class="fa fa-edit icon fa-1x">;</i>; </a>;

                              </div>;
                              <div class="col-md-2">;
                                  <form action="{{ route('msfs.destroy',$msf ->id)}}" method="POST">;
                                      @csrf
                                      @method('DELETE')
                                      <button type="submit"  class="" style="margin-left: 5px;">;
                                          <i class="fa fa-trash icon fa-1x">;</i>;</button>;
                                  </form>;
                              </div>;
                              <div class="col-md-2">;
                                  <a href="{{route('msfs.show',$msf ->id)}}" style="margin-left: 5px;" class="icon">;<i class="fa fa-eye  fa-1x" >;</i>;&ensp;</span>;</a>;

                              </div>;
                          </div>;
                      </td>;
                      </tr>;
                  <?php $i++?>;
                  @endforeach
                </tbody>;
            </table>;
        </div>;

        &lt;div class="box-header"&gt;;
          &lt;div class="row mt-3">;
              &lt;div class="col-md-6">;
                  &lt;h3 class="box-title text-color">;Slide Images&lt;/h3>;

              &lt;/div>;
              &lt;div class="col-md-6 text-right">;
                  &lt;a href="{{route('msfs.create')}}" class="btn btn-sm px-4 btn-custom">;&lt;i class="fa fa-plus">;&lt;/i>;&nbsp; Add new Image&lt;/a>;

              &lt;/div>;
          &lt;/div>;
       &lt;/div>;
       &lt;div class="box-body">;
            &lt;table id="table_id" class="table display responsive nowrap" width="100%">;
                &lt;thead>;
                      &lt;tr>;
                      &lt;th>;SR NO&lt;/th>;&lt;br>
                      &lt;th> dfaasdf&lt;/th>&lt;br>&lt;th> as&lt;/th>&lt;br>&lt;th> df&lt;/th>&lt;br>
                      &lt;th>;Action&lt;/th>;
                      &lt;/tr>;
                &lt;/thead>;
                &lt;tbody>;
                      &lt;?php $i=1;?>;
                  @foreach($msfs as $msf)
                      &lt;tr>;
                      &lt;td>;{{$i}}&lt;/td>;&lt;br>
                      
                      &lt;td>{{$msf->dfaasdf}}&lt;/td>&lt;br>&lt;td>{{$msf->as}}&lt;/td>&lt;br>&lt;td>{{$msf->df}}&lt;/td>&lt;br>

                      &lt;td>;
                          &lt;div class="row">;
                              &lt;div class="col-md-2">;
                                  &lt;a href="{{route('msfs.edit',$msf ->id)}}" class=" " style="margin-left: 5px;">;&lt;i class="fa fa-edit icon fa-1x">;&lt;/i>; &lt;/a>;

                              &lt;/div>;
                              &lt;div class="col-md-2">;
                                  &lt;form action="{{ route('msfs.destroy',$msf ->id)}}" method="POST">;
                                      @csrf
                                      @method('DELETE')
                                      &lt;button type="submit"  class="" style="margin-left: 5px;">;
                                          &lt;i class="fa fa-trash icon fa-1x">;&lt;/i>;&lt;/button>;
                                  &lt;/form>;
                              &lt;/div>;
                              &lt;div class="col-md-2">;
                                  &lt;a href="{{route('msfs.show',$msf ->id)}}" style="margin-left: 5px;" class="icon">;&lt;i class="fa fa-eye  fa-1x" >;&lt;/i>;&ensp;&lt;/span>;&lt;/a>;

                              &lt;/div>;
                          &lt;/div>;
                      &lt;/td>;
                      &lt;/tr>;
                  &lt;?php $i++?>;
                  @endforeach
                &lt;/tbody>;
            &lt;/table>;
        &lt;/div>;

        &lt;div class="box-header"&gt;;
          &lt;div class="row mt-3"&gt;;
              &lt;div class="col-md-6"&gt;;
                  &lt;h3 class="box-title text-color"&gt;;Slide Images&lt;/h3&gt;;

              &lt;/div&gt;;
              &lt;div class="col-md-6 text-right"&gt;;
                  &lt;a href="{{route('msfs.create')}}" class="btn btn-sm px-4 btn-custom"&gt;;&lt;i class="fa fa-plus"&gt;;&lt;/i&gt;;&nbsp; Add new Image&lt;/a&gt;;

              &lt;/div&gt;;
          &lt;/div&gt;;
       &lt;/div&gt;;
       &lt;div class="box-body"&gt;;
            &lt;table id="table_id" class="table display responsive nowrap" width="100%"&gt;;
                &lt;thead&gt;;
                      &lt;tr&gt;;
                      &lt;th&gt;;SR NO&lt;/th&gt;;&lt;br&gt;
                      &lt;th&gt; dfaasdf&lt;/th&gt;&lt;br&gt;&lt;th&gt; as&lt;/th&gt;&lt;br&gt;&lt;th&gt; df&lt;/th&gt;&lt;br&gt;
                      &lt;th&gt;;Action&lt;/th&gt;;
                      &lt;/tr&gt;;
                &lt;/thead&gt;;
                &lt;tbody&gt;;
                      &lt;?php $i=1;?&gt;;
                  @foreach($msfs as $msf)
                      &lt;tr&gt;;
                      &lt;td&gt;;{{$i}}&lt;/td&gt;;&lt;br&gt;
                      
                      &lt;td&gt;{{$msf-&gt;dfaasdf}}&lt;/td&gt;&lt;br&gt;&lt;td&gt;{{$msf-&gt;as}}&lt;/td&gt;&lt;br&gt;&lt;td&gt;{{$msf-&gt;df}}&lt;/td&gt;&lt;br&gt;

                      &lt;td&gt;;
                          &lt;div class="row"&gt;;
                              &lt;div class="col-md-2"&gt;;
                                  &lt;a href="{{route('msfs.edit',$msf -&gt;id)}}" class=" " style="margin-left: 5px;"&gt;;&lt;i class="fa fa-edit icon fa-1x"&gt;;&lt;/i&gt;; &lt;/a&gt;;

                              &lt;/div&gt;;
                              &lt;div class="col-md-2"&gt;;
                                  &lt;form action="{{ route('msfs.destroy',$msf -&gt;id)}}" method="POST"&gt;;
                                      @csrf
                                      @method('DELETE')
                                      &lt;button type="submit"  class="" style="margin-left: 5px;"&gt;;
                                          &lt;i class="fa fa-trash icon fa-1x"&gt;;&lt;/i&gt;;&lt;/button&gt;;
                                  &lt;/form&gt;;
                              &lt;/div&gt;;
                              &lt;div class="col-md-2"&gt;;
                                  &lt;a href="{{route('msfs.show',$msf -&gt;id)}}" style="margin-left: 5px;" class="icon"&gt;;&lt;i class="fa fa-eye  fa-1x" &gt;;&lt;/i&gt;;&ensp;&lt;/span&gt;;&lt;/a&gt;;

                              &lt;/div&gt;;
                          &lt;/div&gt;;
                      &lt;/td&gt;;
                      &lt;/tr&gt;;
                  &lt;?php $i++?&gt;;
                  @endforeach
                &lt;/tbody&gt;;
            &lt;/table&gt;;
        &lt;/div&gt;;

        &lt;div class="box-header"&gt;;
          &lt;div class="row mt-3"&gt;;
              &lt;div class="col-md-6"&gt;;
                  &lt;h3 class="box-title text-color"&gt;;Slide Images&lt;/h3&gt;;

              &lt;/div&gt;;
              &lt;div class="col-md-6 text-right"&gt;;
                  &lt;a href="{{route('msfs.create')}}" class="btn btn-sm px-4 btn-custom"&gt;;&lt;i class="fa fa-plus"&gt;;&lt;/i&gt;;&nbsp; Add new Image&lt;/a&gt;;

              &lt;/div&gt;;
          &lt;/div&gt;;
       &lt;/div&gt;;
       &lt;div class="box-body"&gt;;
            &lt;table id="table_id" class="table display responsive nowrap" width="100%"&gt;;
                &lt;thead&gt;;
                      &lt;tr&gt;;
                      &lt;th&gt;;SR NO&lt;/th&gt;;&lt;br&gt;
                      &lt;th&gt; dfaasdf&lt;/th&gt;&lt;br&gt;&lt;th&gt; as&lt;/th&gt;&lt;br&gt;&lt;th&gt; df&lt;/th&gt;&lt;br&gt;
                      &lt;th&gt;;Action&lt;/th&gt;;
                      &lt;/tr&gt;;
                &lt;/thead&gt;;
                &lt;tbody&gt;;
                      &lt;?php $i=1;?&gt;;
                  @foreach($msfs as $msf)
                      &lt;tr&gt;;
                      &lt;td&gt;;{{$i}}&lt;/td&gt;;&lt;br&gt;
                      
                      &lt;td&gt;{{$msf-&gt;dfaasdf}}&lt;/td&gt;&lt;br&gt;&lt;td&gt;{{$msf-&gt;as}}&lt;/td&gt;&lt;br&gt;&lt;td&gt;{{$msf-&gt;df}}&lt;/td&gt;&lt;br&gt;

                      &lt;td&gt;;
                          &lt;div class="row"&gt;;
                              &lt;div class="col-md-2"&gt;;
                                  &lt;a href="{{route('msfs.edit',$msf -&gt;id)}}" class=" " style="margin-left: 5px;"&gt;;&lt;i class="fa fa-edit icon fa-1x"&gt;;&lt;/i&gt;; &lt;/a&gt;;

                              &lt;/div&gt;;
                              &lt;div class="col-md-2"&gt;;
                                  &lt;form action="{{ route('msfs.destroy',$msf -&gt;id)}}" method="POST"&gt;;
                                      @csrf
                                      @method('DELETE')
                                      &lt;button type="submit"  class="" style="margin-left: 5px;"&gt;;
                                          &lt;i class="fa fa-trash icon fa-1x"&gt;;&lt;/i&gt;;&lt;/button&gt;;
                                  &lt;/form&gt;;
                              &lt;/div&gt;;
                              &lt;div class="col-md-2"&gt;;
                                  &lt;a href="{{route('msfs.show',$msf -&gt;id)}}" style="margin-left: 5px;" class="icon"&gt;;&lt;i class="fa fa-eye  fa-1x" &gt;;&lt;/i&gt;;&ensp;&lt;/span&gt;;&lt;/a&gt;;

                              &lt;/div&gt;;
                          &lt;/div&gt;;
                      &lt;/td&gt;;
                      &lt;/tr&gt;;
                  &lt;?php $i++?&gt;;
                  @endforeach
                &lt;/tbody&gt;;
            &lt;/table&gt;;
        &lt;/div&gt;;

        &lt;div class="box-header"&gt;;
          &lt;div class="row mt-3"&gt;;
              &lt;div class="col-md-6"&gt;;
                  &lt;h3 class="box-title text-color"&gt;;Slide Images&lt;/h3&gt;;

              &lt;/div&gt;;
              &lt;div class="col-md-6 text-right"&gt;;
                  &lt;a href="{{route('msfs.create')}}" class="btn btn-sm px-4 btn-custom"&gt;;&lt;i class="fa fa-plus"&gt;;&lt;/i&gt;;&nbsp; Add new Image&lt;/a&gt;;

              &lt;/div&gt;;
          &lt;/div&gt;;
       &lt;/div&gt;;
       &lt;div class="box-body"&gt;;
            &lt;table id="table_id" class="table display responsive nowrap" width="100%"&gt;;
                &lt;thead&gt;;
                      &lt;tr&gt;;
                      &lt;th&gt;;SR NO&lt;/th&gt;;&lt;br&gt;
                      &lt;th&gt; dfaasdf&lt;/th&gt;&lt;br&gt;&lt;th&gt; as&lt;/th&gt;&lt;br&gt;&lt;th&gt; df&lt;/th&gt;&lt;br&gt;
                      &lt;th&gt;;Action&lt;/th&gt;;
                      &lt;/tr&gt;;
                &lt;/thead&gt;;
                &lt;tbody&gt;;
                      &lt;?php $i=1;?&gt;;
                  @foreach($msfs as $msf)
                      &lt;tr&gt;;
                      &lt;td&gt;;{{$i}}&lt;/td&gt;;&lt;br&gt;
                      
                      &lt;td&gt;{{$msf-&gt;dfaasdf}}&lt;/td&gt;&lt;br&gt;&lt;td&gt;{{$msf-&gt;as}}&lt;/td&gt;&lt;br&gt;&lt;td&gt;{{$msf-&gt;df}}&lt;/td&gt;&lt;br&gt;

                      &lt;td&gt;;
                          &lt;div class="row"&gt;;
                              &lt;div class="col-md-2"&gt;;
                                  &lt;a href="{{route('msfs.edit',$msf -&gt;id)}}" class=" " style="margin-left: 5px;"&gt;;&lt;i class="fa fa-edit icon fa-1x"&gt;;&lt;/i&gt;; &lt;/a&gt;;

                              &lt;/div&gt;;
                              &lt;div class="col-md-2"&gt;;
                                  &lt;form action="{{ route('msfs.destroy',$msf -&gt;id)}}" method="POST"&gt;;
                                      @csrf
                                      @method('DELETE')
                                      &lt;button type="submit"  class="" style="margin-left: 5px;"&gt;;
                                          &lt;i class="fa fa-trash icon fa-1x"&gt;;&lt;/i&gt;;&lt;/button&gt;;
                                  &lt;/form&gt;;
                              &lt;/div&gt;;
                              &lt;div class="col-md-2"&gt;;
                                  &lt;a href="{{route('msfs.show',$msf -&gt;id)}}" style="margin-left: 5px;" class="icon"&gt;;&lt;i class="fa fa-eye  fa-1x" &gt;;&lt;/i&gt;;&ensp;&lt;/span&gt;;&lt;/a&gt;;

                              &lt;/div&gt;;
                          &lt;/div&gt;;
                      &lt;/td&gt;;
                      &lt;/tr&gt;;
                  &lt;?php $i++?&gt;;
                  @endforeach
                &lt;/tbody&gt;;
            &lt;/table&gt;;
        &lt;/div&gt;;

        &lt;div class="box-header"&gt;;
          &lt;div class="row mt-3"&gt;;
              &lt;div class="col-md-6"&gt;;
                  &lt;h3 class="box-title text-color"&gt;;Slide Images&lt;/h3&gt;;

              &lt;/div&gt;;
              &lt;div class="col-md-6 text-right"&gt;;
                  &lt;a href="{{route('msfs.create')}}" class="btn btn-sm px-4 btn-custom"&gt;;&lt;i class="fa fa-plus"&gt;;&lt;/i&gt;;&nbsp; Add new Image&lt;/a&gt;;

              &lt;/div&gt;;
          &lt;/div&gt;;
       &lt;/div&gt;;
       &lt;div class="box-body"&gt;;
            &lt;table id="table_id" class="table display responsive nowrap" width="100%"&gt;;
                &lt;thead&gt;;
                      &lt;tr&gt;;
                      &lt;th&gt;;SR NO&lt;/th&gt;;&lt;br&gt;
                      &lt;th&gt; dfaasdf&lt;/th&gt;&lt;br&gt;&lt;th&gt; as&lt;/th&gt;&lt;br&gt;&lt;th&gt; df&lt;/th&gt;&lt;br&gt;
                      &lt;th&gt;;Action&lt;/th&gt;;
                      &lt;/tr&gt;;
                &lt;/thead&gt;;
                &lt;tbody&gt;;
                      &lt;?php $i=1;?&gt;;
                  @foreach($msfs as $msf)
                      &lt;tr&gt;;
                      &lt;td&gt;;{{$i}}&lt;/td&gt;;&lt;br&gt;
                      
                      &lt;td&gt;{{$msf-&gt;dfaasdf}}&lt;/td&gt;&lt;br&gt;&lt;td&gt;{{$msf-&gt;as}}&lt;/td&gt;&lt;br&gt;&lt;td&gt;{{$msf-&gt;df}}&lt;/td&gt;&lt;br&gt;

                      &lt;td&gt;;
                          &lt;div class="row"&gt;;
                              &lt;div class="col-md-2"&gt;;
                                  &lt;a href="{{route('msfs.edit',$msf -&gt;id)}}" class=" " style="margin-left: 5px;"&gt;;&lt;i class="fa fa-edit icon fa-1x"&gt;;&lt;/i&gt;; &lt;/a&gt;;

                              &lt;/div&gt;;
                              &lt;div class="col-md-2"&gt;;
                                  &lt;form action="{{ route('msfs.destroy',$msf -&gt;id)}}" method="POST"&gt;;
                                      @csrf
                                      @method('DELETE')
                                      &lt;button type="submit"  class="" style="margin-left: 5px;"&gt;;
                                          &lt;i class="fa fa-trash icon fa-1x"&gt;;&lt;/i&gt;;&lt;/button&gt;;
                                  &lt;/form&gt;;
                              &lt;/div&gt;;
                              &lt;div class="col-md-2"&gt;;
                                  &lt;a href="{{route('msfs.show',$msf -&gt;id)}}" style="margin-left: 5px;" class="icon"&gt;;&lt;i class="fa fa-eye  fa-1x" &gt;;&lt;/i&gt;;&ensp;&lt;/span&gt;;&lt;/a&gt;;

                              &lt;/div&gt;;
                          &lt;/div&gt;;
                      &lt;/td&gt;;
                      &lt;/tr&gt;;
                  &lt;?php $i++?&gt;;
                  @endforeach
                &lt;/tbody&gt;;
            &lt;/table&gt;;
        &lt;/div&gt;;

        &lt;div class="box-header"&gt;;
          &lt;div class="row mt-3"&gt;;
              &lt;div class="col-md-6"&gt;;
                  &lt;h3 class="box-title text-color"&gt;;Slide Images&lt;/h3&gt;;

              &lt;/div&gt;;
              &lt;div class="col-md-6 text-right"&gt;;
                  &lt;a href="{{route('msfs.create')}}" class="btn btn-sm px-4 btn-custom"&gt;;&lt;i class="fa fa-plus"&gt;;&lt;/i&gt;;&nbsp; Add new Image&lt;/a&gt;;

              &lt;/div&gt;;
          &lt;/div&gt;;
       &lt;/div&gt;;
       &lt;div class="box-body"&gt;;
            &lt;table id="table_id" class="table display responsive nowrap" width="100%"&gt;;
                &lt;thead&gt;;
                      &lt;tr&gt;;
                      &lt;th&gt;;SR NO&lt;/th&gt;;&lt;br&gt;
                      &lt;th&gt; as&lt;/th&gt;&lt;br&gt;&lt;th&gt; df&lt;/th&gt;&lt;br&gt;
                      &lt;th&gt;;Action&lt;/th&gt;;
                      &lt;/tr&gt;;
                &lt;/thead&gt;;
                &lt;tbody&gt;;
                      &lt;?php $i=1;?&gt;;
                  @foreach($msfs as $msf)
                      &lt;tr&gt;;
                      &lt;td&gt;;{{$i}}&lt;/td&gt;;&lt;br&gt;
                      
                      &lt;td&gt;&lt;img src="{{asset("uploads/msf/".$msf-&gt;dfaasdf )}}" width=100&gt;&lt;/td&gt;&lt;br&gt;&lt;td&gt;{{$msf-&gt;as}}&lt;/td&gt;&lt;br&gt;&lt;td&gt;{{$msf-&gt;df}}&lt;/td&gt;&lt;br&gt;

                      &lt;td&gt;;
                          &lt;div class="row"&gt;;
                              &lt;div class="col-md-2"&gt;;
                                  &lt;a href="{{route('msfs.edit',$msf -&gt;id)}}" class=" " style="margin-left: 5px;"&gt;;&lt;i class="fa fa-edit icon fa-1x"&gt;;&lt;/i&gt;; &lt;/a&gt;;

                              &lt;/div&gt;;
                              &lt;div class="col-md-2"&gt;;
                                  &lt;form action="{{ route('msfs.destroy',$msf -&gt;id)}}" method="POST"&gt;;
                                      @csrf
                                      @method('DELETE')
                                      &lt;button type="submit"  class="" style="margin-left: 5px;"&gt;;
                                          &lt;i class="fa fa-trash icon fa-1x"&gt;;&lt;/i&gt;;&lt;/button&gt;;
                                  &lt;/form&gt;;
                              &lt;/div&gt;;
                              &lt;div class="col-md-2"&gt;;
                                  &lt;a href="{{route('msfs.show',$msf -&gt;id)}}" style="margin-left: 5px;" class="icon"&gt;;&lt;i class="fa fa-eye  fa-1x" &gt;;&lt;/i&gt;;&ensp;&lt;/span&gt;;&lt;/a&gt;;

                              &lt;/div&gt;;
                          &lt;/div&gt;;
                      &lt;/td&gt;;
                      &lt;/tr&gt;;
                  &lt;?php $i++?&gt;;
                  @endforeach
                &lt;/tbody&gt;;
            &lt;/table&gt;;
        &lt;/div&gt;;

        &lt;div class="box-header"&gt;;
          &lt;div class="row mt-3"&gt;;
              &lt;div class="col-md-6"&gt;;
                  &lt;h3 class="box-title text-color"&gt;;Slide Images&lt;/h3&gt;;

              &lt;/div&gt;;
              &lt;div class="col-md-6 text-right"&gt;;
                  &lt;a href="{{route('msfs.create')}}" class="btn btn-sm px-4 btn-custom"&gt;;&lt;i class="fa fa-plus"&gt;;&lt;/i&gt;;&nbsp; Add new Image&lt;/a&gt;;

              &lt;/div&gt;;
          &lt;/div&gt;;
       &lt;/div&gt;;
       &lt;div class="box-body"&gt;;
            &lt;table id="table_id" class="table display responsive nowrap" width="100%"&gt;;
                &lt;thead&gt;;
                      &lt;tr&gt;;
                      &lt;th&gt;;SR NO&lt;/th&gt;;&lt;br&gt;
                      &lt;th&gt; as&lt;/th&gt;&lt;br&gt;&lt;th&gt; df&lt;/th&gt;&lt;br&gt;
                      &lt;th&gt;;Action&lt;/th&gt;;
                      &lt;/tr&gt;;
                &lt;/thead&gt;;
                &lt;tbody&gt;;
                      &lt;?php $i=1;?&gt;;
                  @foreach($msfs as $msf)
                      &lt;tr&gt;;
                      &lt;td&gt;;{{$i}}&lt;/td&gt;;&lt;br&gt;
                      
                      &lt;td&gt;&lt;img src="{{asset("uploads/msf/".$msf-&gt;dfaasdf )}}" width=100&gt;&lt;/td&gt;&lt;br&gt;&lt;td&gt;{{$msf-&gt;as}}&lt;/td&gt;&lt;br&gt;&lt;td&gt;{{$msf-&gt;df}}&lt;/td&gt;&lt;br&gt;

                      &lt;td&gt;;
                          &lt;div class="row"&gt;;
                              &lt;div class="col-md-2"&gt;;
                                  &lt;a href="{{route('msfs.edit',$msf -&gt;id)}}" class=" " style="margin-left: 5px;"&gt;;&lt;i class="fa fa-edit icon fa-1x"&gt;;&lt;/i&gt;; &lt;/a&gt;;

                              &lt;/div&gt;;
                              &lt;div class="col-md-2"&gt;;
                                  &lt;form action="{{ route('msfs.destroy',$msf -&gt;id)}}" method="POST"&gt;;
                                      @csrf
                                      @method('DELETE')
                                      &lt;button type="submit"  class="" style="margin-left: 5px;"&gt;;
                                          &lt;i class="fa fa-trash icon fa-1x"&gt;;&lt;/i&gt;;&lt;/button&gt;;
                                  &lt;/form&gt;;
                              &lt;/div&gt;;
                              &lt;div class="col-md-2"&gt;;
                                  &lt;a href="{{route('msfs.show',$msf -&gt;id)}}" style="margin-left: 5px;" class="icon"&gt;;&lt;i class="fa fa-eye  fa-1x" &gt;;&lt;/i&gt;;&ensp;&lt;/span&gt;;&lt;/a&gt;;

                              &lt;/div&gt;;
                          &lt;/div&gt;;
                      &lt;/td&gt;;
                      &lt;/tr&gt;;
                  &lt;?php $i++?&gt;;
                  @endforeach
                &lt;/tbody&gt;;
            &lt;/table&gt;;
        &lt;/div&gt;;

        &lt;div class="box-header"&gt;;
          &lt;div class="row mt-3"&gt;;
              &lt;div class="col-md-6"&gt;;
                  &lt;h3 class="box-title text-color"&gt;;Slide Images&lt;/h3&gt;;

              &lt;/div&gt;;
              &lt;div class="col-md-6 text-right"&gt;;
                  &lt;a href="{{route('msfs.create')}}" class="btn btn-sm px-4 btn-custom"&gt;;&lt;i class="fa fa-plus"&gt;;&lt;/i&gt;;&nbsp; Add new Image&lt;/a&gt;;

              &lt;/div&gt;;
          &lt;/div&gt;;
       &lt;/div&gt;;
       &lt;div class="box-body"&gt;;
            &lt;table id="table_id" class="table display responsive nowrap" width="100%"&gt;;
                &lt;thead&gt;;
                      &lt;tr&gt;;
                      &lt;th&gt;;SR NO&lt;/th&gt;;&lt;br&gt;
                      &lt;th&gt; as&lt;/th&gt;&lt;br&gt;&lt;th&gt; df&lt;/th&gt;&lt;br&gt;
                      &lt;th&gt;;Action&lt;/th&gt;;
                      &lt;/tr&gt;;
                &lt;/thead&gt;;
                &lt;tbody&gt;;
                      &lt;?php $i=1;?&gt;;
                  @foreach($msfs as $msf)
                      &lt;tr&gt;;
                      &lt;td&gt;;{{$i}}&lt;/td&gt;;&lt;br&gt;
                      
                      &lt;td&gt;&lt;img src="{{asset("uploads/msf/".$msf-&gt;dfaasdf )}}" width=100&gt;&lt;/td&gt;&lt;br&gt;&lt;td&gt;{{$msf-&gt;as}}&lt;/td&gt;&lt;br&gt;&lt;td&gt;{{$msf-&gt;df}}&lt;/td&gt;&lt;br&gt;

                      &lt;td&gt;;
                          &lt;div class="row"&gt;;
                              &lt;div class="col-md-2"&gt;;
                                  &lt;a href="{{route('msfs.edit',$msf -&gt;id)}}" class=" " style="margin-left: 5px;"&gt;;&lt;i class="fa fa-edit icon fa-1x"&gt;;&lt;/i&gt;; &lt;/a&gt;;

                              &lt;/div&gt;;
                              &lt;div class="col-md-2"&gt;;
                                  &lt;form action="{{ route('msfs.destroy',$msf -&gt;id)}}" method="POST"&gt;;
                                      @csrf
                                      @method('DELETE')
                                      &lt;button type="submit"  class="" style="margin-left: 5px;"&gt;;
                                          &lt;i class="fa fa-trash icon fa-1x"&gt;;&lt;/i&gt;;&lt;/button&gt;;
                                  &lt;/form&gt;;
                              &lt;/div&gt;;
                              &lt;div class="col-md-2"&gt;;
                                  &lt;a href="{{route('msfs.show',$msf -&gt;id)}}" style="margin-left: 5px;" class="icon"&gt;;&lt;i class="fa fa-eye  fa-1x" &gt;;&lt;/i&gt;;&ensp;&lt;/span&gt;;&lt;/a&gt;;

                              &lt;/div&gt;;
                          &lt;/div&gt;;
                      &lt;/td&gt;;
                      &lt;/tr&gt;;
                  &lt;?php $i++?&gt;;
                  @endforeach
                &lt;/tbody&gt;;
            &lt;/table&gt;;
        &lt;/div&gt;;



        public function index()
        {

            return  MsfResource::collection( Msf::all());

        }        
        
        public function store(Request $request)
        {
            $this->validate([
               
                

            ]);
            $msfs = new Msf();
            
            
        if($request->file('dfaasdf')) {
            $upload = $request->file('dfaasdf');
            $fileformat = time().$upload->getClientOriginalName();
            if ($upload->move('uploads/msfs/', $fileformat)) {
                $msfs->dfaasdf = $fileformat;
            }
        }

                $msfs->as = $request->as;<br>
                $msfs->df = $request->df;<br>

            if($msfs ->save()){
                return response()->json([ 
                        
                    'status'=>'S',
                        
                ]);
            }
            else{
                return response()->json([ 
            
                    'status'=>'F',            
                        
                ]);
            }

        }        
        
        public function update(Request $request, $id)
        {
          $this->validate($request,[
                
          ]);
        
          $msfs=Msf::findOrFail($id);
               
            
        if($request->file('dfaasdf')) {
            $upload = $request->file('dfaasdf');
            $fileformat = time().$upload->getClientOriginalName();
            if ($upload->move('uploads/msfs/', $fileformat)) {
                $msfs->dfaasdf = $fileformat;
            }
        }

                $msfs->as = $request->as;<br>
                $msfs->df = $request->df;<br>
        
          if($item->update()){
             return [
                 'status' => 'S',
             ];
          }else{
              return [
                  'status' => 'F',
              ];
          }
          return $request;   
             
        }        
        
        public function destroy($id)
        {
            $msfs = Msf::findOrFail($id);
                        if($msfs->dfaasdf !=="no-image.png"){
            unlink('uploads/msfs/'.$msfs->dfaasdf );
        } 
            if( Msf::where('id',$id)->delete()){
                return "S";
            }
            else{
                return "F";
            }
        }

        &lt;div class="box-header"&gt;;
          &lt;div class="row mt-3"&gt;;
              &lt;div class="col-md-6"&gt;;
                  &lt;h3 class="box-title text-color"&gt;;Slide Images&lt;/h3&gt;;

              &lt;/div&gt;;
              &lt;div class="col-md-6 text-right"&gt;;
                  &lt;a href="{{route('msfs.create')}}" class="btn btn-sm px-4 btn-custom"&gt;;&lt;i class="fa fa-plus"&gt;;&lt;/i&gt;;&nbsp; Add new Image&lt;/a&gt;;

              &lt;/div&gt;;
          &lt;/div&gt;;
       &lt;/div&gt;;
       &lt;div class="box-body"&gt;;
            &lt;table id="table_id" class="table display responsive nowrap" width="100%"&gt;;
                &lt;thead&gt;;
                      &lt;tr&gt;;
                      &lt;th&gt;;SR NO&lt;/th&gt;;&lt;br&gt;
                      &lt;th&gt; as&lt;/th&gt;&lt;br&gt;&lt;th&gt; df&lt;/th&gt;&lt;br&gt;
                      &lt;th&gt;;Action&lt;/th&gt;;
                      &lt;/tr&gt;;
                &lt;/thead&gt;;
                &lt;tbody&gt;;
                      &lt;?php $i=1;?&gt;;
                  @foreach($msfs as $msf)
                      &lt;tr&gt;;
                      &lt;td&gt;;{{$i}}&lt;/td&gt;;&lt;br&gt;
                      
                      &lt;td&gt;&lt;img src="{{asset("uploads/msf/".$msf-&gt;dfaasdf )}}" width=100&gt;&lt;/td&gt;&lt;br&gt;&lt;td&gt;{{$msf-&gt;as}}&lt;/td&gt;&lt;br&gt;&lt;td&gt;{{$msf-&gt;df}}&lt;/td&gt;&lt;br&gt;

                      &lt;td&gt;;
                          &lt;div class="row"&gt;;
                              &lt;div class="col-md-2"&gt;;
                                  &lt;a href="{{route('msfs.edit',$msf -&gt;id)}}" class=" " style="margin-left: 5px;"&gt;;&lt;i class="fa fa-edit icon fa-1x"&gt;;&lt;/i&gt;; &lt;/a&gt;;

                              &lt;/div&gt;;
                              &lt;div class="col-md-2"&gt;;
                                  &lt;form action="{{ route('msfs.destroy',$msf -&gt;id)}}" method="POST"&gt;;
                                      @csrf
                                      @method('DELETE')
                                      &lt;button type="submit"  class="" style="margin-left: 5px;"&gt;;
                                          &lt;i class="fa fa-trash icon fa-1x"&gt;;&lt;/i&gt;;&lt;/button&gt;;
                                  &lt;/form&gt;;
                              &lt;/div&gt;;
                              &lt;div class="col-md-2"&gt;;
                                  &lt;a href="{{route('msfs.show',$msf -&gt;id)}}" style="margin-left: 5px;" class="icon"&gt;;&lt;i class="fa fa-eye  fa-1x" &gt;;&lt;/i&gt;;&ensp;&lt;/span&gt;;&lt;/a&gt;;

                              &lt;/div&gt;;
                          &lt;/div&gt;;
                      &lt;/td&gt;;
                      &lt;/tr&gt;;
                  &lt;?php $i++?&gt;;
                  @endforeach
                &lt;/tbody&gt;;
            &lt;/table&gt;;
        &lt;/div&gt;;



        public function index()
        {

            return  MsfResource::collection( Msf::all());

        }        
        
        public function store(Request $request)
        {
            $this->validate([
               
                
            'as'=>'required',<br>

            ]);
            $msfs = new Msf();
            
            
        if($request->file('dfaasdf')) {
            $upload = $request->file('dfaasdf');
            $fileformat = time().$upload->getClientOriginalName();
            if ($upload->move('uploads/msfs/', $fileformat)) {
                $msfs->dfaasdf = $fileformat;
            }
        }

                $msfs->as = $request->as;<br>
                $msfs->df = $request->df;<br>

            if($msfs ->save()){
                return response()->json([ 
                        
                    'status'=>'S',
                        
                ]);
            }
            else{
                return response()->json([ 
            
                    'status'=>'F',            
                        
                ]);
            }

        }        
        
        public function update(Request $request, $id)
        {
          $this->validate($request,[
                
            'as'=>'required',<br>
          ]);
        
          $msfs=Msf::findOrFail($id);
               
            
        if($request->file('dfaasdf')) {
            $upload = $request->file('dfaasdf');
            $fileformat = time().$upload->getClientOriginalName();
            if ($upload->move('uploads/msfs/', $fileformat)) {
                $msfs->dfaasdf = $fileformat;
            }
        }

                $msfs->as = $request->as;<br>
                $msfs->df = $request->df;<br>
        
          if($item->update()){
             return [
                 'status' => 'S',
             ];
          }else{
              return [
                  'status' => 'F',
              ];
          }
          return $request;   
             
        }        
        
        public function destroy($id)
        {
            $msfs = Msf::findOrFail($id);
                        if($msfs->dfaasdf !=="no-image.png"){
            unlink('uploads/msfs/'.$msfs->dfaasdf );
        } 
            if( Msf::where('id',$id)->delete()){
                return "S";
            }
            else{
                return "F";
            }
        }

        &lt;div class="box-header"&gt;;
          &lt;div class="row mt-3"&gt;;
              &lt;div class="col-md-6"&gt;;
                  &lt;h3 class="box-title text-color"&gt;;Slide Images&lt;/h3&gt;;

              &lt;/div&gt;;
              &lt;div class="col-md-6 text-right"&gt;;
                  &lt;a href="{{route('msfs.create')}}" class="btn btn-sm px-4 btn-custom"&gt;;&lt;i class="fa fa-plus"&gt;;&lt;/i&gt;;&nbsp; Add new Image&lt;/a&gt;;

              &lt;/div&gt;;
          &lt;/div&gt;;
       &lt;/div&gt;;
       &lt;div class="box-body"&gt;;
            &lt;table id="table_id" class="table display responsive nowrap" width="100%"&gt;;
                &lt;thead&gt;;
                      &lt;tr&gt;;
                      &lt;th&gt;;SR NO&lt;/th&gt;;&lt;br&gt;
                      &lt;th&gt; as&lt;/th&gt;&lt;br&gt;&lt;th&gt; df&lt;/th&gt;&lt;br&gt;
                      &lt;th&gt;;Action&lt;/th&gt;;
                      &lt;/tr&gt;;
                &lt;/thead&gt;;
                &lt;tbody&gt;;
                      &lt;?php $i=1;?&gt;;
                  @foreach($msfs as $msf)
                      &lt;tr&gt;;
                      &lt;td&gt;;{{$i}}&lt;/td&gt;;&lt;br&gt;
                      
                      &lt;td&gt;&lt;img src="{{asset("uploads/msf/".$msf-&gt;dfaasdf )}}" width=100&gt;&lt;/td&gt;&lt;br&gt;&lt;td&gt;{{$msf-&gt;as}}&lt;/td&gt;&lt;br&gt;&lt;td&gt;{{$msf-&gt;df}}&lt;/td&gt;&lt;br&gt;

                      &lt;td&gt;;
                          &lt;div class="row"&gt;;
                              &lt;div class="col-md-2"&gt;;
                                  &lt;a href="{{route('msfs.edit',$msf -&gt;id)}}" class=" " style="margin-left: 5px;"&gt;;&lt;i class="fa fa-edit icon fa-1x"&gt;;&lt;/i&gt;; &lt;/a&gt;;

                              &lt;/div&gt;;
                              &lt;div class="col-md-2"&gt;;
                                  &lt;form action="{{ route('msfs.destroy',$msf -&gt;id)}}" method="POST"&gt;;
                                      @csrf
                                      @method('DELETE')
                                      &lt;button type="submit"  class="" style="margin-left: 5px;"&gt;;
                                          &lt;i class="fa fa-trash icon fa-1x"&gt;;&lt;/i&gt;;&lt;/button&gt;;
                                  &lt;/form&gt;;
                              &lt;/div&gt;;
                              &lt;div class="col-md-2"&gt;;
                                  &lt;a href="{{route('msfs.show',$msf -&gt;id)}}" style="margin-left: 5px;" class="icon"&gt;;&lt;i class="fa fa-eye  fa-1x" &gt;;&lt;/i&gt;;&ensp;&lt;/span&gt;;&lt;/a&gt;;

                              &lt;/div&gt;;
                          &lt;/div&gt;;
                      &lt;/td&gt;;
                      &lt;/tr&gt;;
                  &lt;?php $i++?&gt;;
                  @endforeach
                &lt;/tbody&gt;;
            &lt;/table&gt;;
        &lt;/div&gt;;



        public function index()
        {

            return  MsfResource::collection( Msf::all());

        }        
        
        public function store(Request $request)
        {
            $this->validate([
               
                
            'as'=>'required',

            ]);
            $msfs = new Msf();
            
            
        if($request->file('dfaasdf')) {
            $upload = $request->file('dfaasdf');
            $fileformat = time().$upload->getClientOriginalName();
            if ($upload->move('uploads/msfs/', $fileformat)) {
                $msfs->dfaasdf = $fileformat;
            }
        }

                $msfs->as = $request->as;
                $msfs->df = $request->df;

            if($msfs ->save()){
                return response()->json([ 
                        
                    'status'=>'S',
                        
                ]);
            }
            else{
                return response()->json([ 
            
                    'status'=>'F',            
                        
                ]);
            }

        }        
        
        public function update(Request $request, $id)
        {
          $this->validate($request,[
                
            'as'=>'required',
          ]);
        
          $msfs=Msf::findOrFail($id);
               
            
        if($request->file('dfaasdf')) {
            $upload = $request->file('dfaasdf');
            $fileformat = time().$upload->getClientOriginalName();
            if ($upload->move('uploads/msfs/', $fileformat)) {
                $msfs->dfaasdf = $fileformat;
            }
        }

                $msfs->as = $request->as;
                $msfs->df = $request->df;
        
          if($item->update()){
             return [
                 'status' => 'S',
             ];
          }else{
              return [
                  'status' => 'F',
              ];
          }
          return $request;   
             
        }        
        
        public function destroy($id)
        {
            $msfs = Msf::findOrFail($id);
                        if($msfs->dfaasdf !=="no-image.png"){
            unlink('uploads/msfs/'.$msfs->dfaasdf );
        } 
            if( Msf::where('id',$id)->delete()){
                return "S";
            }
            else{
                return "F";
            }
        }

        &lt;div class="box-header"&gt;;
          &lt;div class="row mt-3"&gt;;
              &lt;div class="col-md-6"&gt;;
                  &lt;h3 class="box-title text-color"&gt;;Slide Images&lt;/h3&gt;;

              &lt;/div&gt;;
              &lt;div class="col-md-6 text-right"&gt;;
                  &lt;a href="{{route('msfs.create')}}" class="btn btn-sm px-4 btn-custom"&gt;;&lt;i class="fa fa-plus"&gt;;&lt;/i&gt;;&nbsp; Add new Image&lt;/a&gt;;

              &lt;/div&gt;;
          &lt;/div&gt;;
       &lt;/div&gt;;
       &lt;div class="box-body"&gt;;
            &lt;table id="table_id" class="table display responsive nowrap" width="100%"&gt;;
                &lt;thead&gt;;
                      &lt;tr&gt;;
                      &lt;th&gt;;SR NO&lt;/th&gt;;&lt;br&gt;
                      &lt;th&gt; as&lt;/th&gt;&lt;br&gt;&lt;th&gt; df&lt;/th&gt;&lt;br&gt;
                      &lt;th&gt;;Action&lt;/th&gt;;
                      &lt;/tr&gt;;
                &lt;/thead&gt;;
                &lt;tbody&gt;;
                      &lt;?php $i=1;?&gt;;
                  @foreach($msfs as $msf)
                      &lt;tr&gt;;
                      &lt;td&gt;;{{$i}}&lt;/td&gt;;&lt;br&gt;
                      
                      &lt;td&gt;&lt;img src="{{asset("uploads/msf/".$msf-&gt;dfaasdf )}}" width=100&gt;&lt;/td&gt;&lt;br&gt;&lt;td&gt;{{$msf-&gt;as}}&lt;/td&gt;&lt;br&gt;&lt;td&gt;{{$msf-&gt;df}}&lt;/td&gt;&lt;br&gt;

                      &lt;td&gt;;
                          &lt;div class="row"&gt;;
                              &lt;div class="col-md-2"&gt;;
                                  &lt;a href="{{route('msfs.edit',$msf -&gt;id)}}" class=" " style="margin-left: 5px;"&gt;;&lt;i class="fa fa-edit icon fa-1x"&gt;;&lt;/i&gt;; &lt;/a&gt;;

                              &lt;/div&gt;;
                              &lt;div class="col-md-2"&gt;;
                                  &lt;form action="{{ route('msfs.destroy',$msf -&gt;id)}}" method="POST"&gt;;
                                      @csrf
                                      @method('DELETE')
                                      &lt;button type="submit"  class="" style="margin-left: 5px;"&gt;;
                                          &lt;i class="fa fa-trash icon fa-1x"&gt;;&lt;/i&gt;;&lt;/button&gt;;
                                  &lt;/form&gt;;
                              &lt;/div&gt;;
                              &lt;div class="col-md-2"&gt;;
                                  &lt;a href="{{route('msfs.show',$msf -&gt;id)}}" style="margin-left: 5px;" class="icon"&gt;;&lt;i class="fa fa-eye  fa-1x" &gt;;&lt;/i&gt;;&ensp;&lt;/span&gt;;&lt;/a&gt;;

                              &lt;/div&gt;;
                          &lt;/div&gt;;
                      &lt;/td&gt;;
                      &lt;/tr&gt;;
                  &lt;?php $i++?&gt;;
                  @endforeach
                &lt;/tbody&gt;;
            &lt;/table&gt;;
        &lt;/div&gt;;



        public function index()
        {

            return  MsfResource::collection( Msf::all());

        }        
        
        public function store(Request $request)
        {
            $this->validate([
               
                
            'as'=>'required',

            ]);
            $msfs = new Msf();
            
            
        if($request->file('dfaasdf')) {
            $upload = $request->file('dfaasdf');
            $fileformat = time().$upload->getClientOriginalName();
            if ($upload->move('uploads/msfs/', $fileformat)) {
                $msfs->dfaasdf = $fileformat;
            }
        }

                $msfs->as = $request->as;
                $msfs->df = $request->df;

            if($msfs ->save()){
                return response()->json([ 
                        
                    'status'=>'S',
                        
                ]);
            }
            else{
                return response()->json([ 
            
                    'status'=>'F',            
                        
                ]);
            }

        }        
        
        public function update(Request $request, $id)
        {
          $this->validate($request,[
                
            'as'=>'required',
          ]);
        
          $msfs=Msf::findOrFail($id);
               
            
        if($request->file('dfaasdf')) {
            $upload = $request->file('dfaasdf');
            $fileformat = time().$upload->getClientOriginalName();
            if ($upload->move('uploads/msfs/', $fileformat)) {
                $msfs->dfaasdf = $fileformat;
            }
        }

                $msfs->as = $request->as;
                $msfs->df = $request->df;
        
          if($item->update()){
             return [
                 'status' => 'S',
             ];
          }else{
              return [
                  'status' => 'F',
              ];
          }
          return $request;   
             
        }        
        
        public function destroy($id)
        {
            $msfs = Msf::findOrFail($id);
                        if($msfs->dfaasdf !=="no-image.png"){
            unlink('uploads/msfs/'.$msfs->dfaasdf );
        } 
            if( Msf::where('id',$id)->delete()){
                return "S";
            }
            else{
                return "F";
            }
        }

        &lt;div class="box-header"&gt;;
          &lt;div class="row mt-3"&gt;;
              &lt;div class="col-md-6"&gt;;
                  &lt;h3 class="box-title text-color"&gt;;Slide Images&lt;/h3&gt;;

              &lt;/div&gt;;
              &lt;div class="col-md-6 text-right"&gt;;
                  &lt;a href="{{route('msfs.create')}}" class="btn btn-sm px-4 btn-custom"&gt;;&lt;i class="fa fa-plus"&gt;;&lt;/i&gt;;&nbsp; Add new Image&lt;/a&gt;;

              &lt;/div&gt;;
          &lt;/div&gt;;
       &lt;/div&gt;;
       &lt;div class="box-body"&gt;;
            &lt;table id="table_id" class="table display responsive nowrap" width="100%"&gt;;
                &lt;thead&gt;;
                      &lt;tr&gt;;
                      &lt;th&gt;;SR NO&lt;/th&gt;;&lt;br&gt;
                      &lt;th&gt; as&lt;/th&gt;&lt;br&gt;&lt;th&gt; df&lt;/th&gt;&lt;br&gt;
                      &lt;th&gt;;Action&lt;/th&gt;;
                      &lt;/tr&gt;;
                &lt;/thead&gt;;
                &lt;tbody&gt;;
                      &lt;?php $i=1;?&gt;;
                  @foreach($msfs as $msf)
                      &lt;tr&gt;;
                      &lt;td&gt;;{{$i}}&lt;/td&gt;;&lt;br&gt;
                      
                      &lt;td&gt;&lt;img src="{{asset("uploads/msf/".$msf-&gt;dfaasdf )}}" width=100&gt;&lt;/td&gt;&lt;br&gt;&lt;td&gt;{{$msf-&gt;as}}&lt;/td&gt;&lt;br&gt;&lt;td&gt;{{$msf-&gt;df}}&lt;/td&gt;&lt;br&gt;

                      &lt;td&gt;;
                          &lt;div class="row"&gt;;
                              &lt;div class="col-md-2"&gt;;
                                  &lt;a href="{{route('msfs.edit',$msf -&gt;id)}}" class=" " style="margin-left: 5px;"&gt;;&lt;i class="fa fa-edit icon fa-1x"&gt;;&lt;/i&gt;; &lt;/a&gt;;

                              &lt;/div&gt;;
                              &lt;div class="col-md-2"&gt;;
                                  &lt;form action="{{ route('msfs.destroy',$msf -&gt;id)}}" method="POST"&gt;;
                                      @csrf
                                      @method('DELETE')
                                      &lt;button type="submit"  class="" style="margin-left: 5px;"&gt;;
                                          &lt;i class="fa fa-trash icon fa-1x"&gt;;&lt;/i&gt;;&lt;/button&gt;;
                                  &lt;/form&gt;;
                              &lt;/div&gt;;
                              &lt;div class="col-md-2"&gt;;
                                  &lt;a href="{{route('msfs.show',$msf -&gt;id)}}" style="margin-left: 5px;" class="icon"&gt;;&lt;i class="fa fa-eye  fa-1x" &gt;;&lt;/i&gt;;&ensp;&lt;/span&gt;;&lt;/a&gt;;

                              &lt;/div&gt;;
                          &lt;/div&gt;;
                      &lt;/td&gt;;
                      &lt;/tr&gt;;
                  &lt;?php $i++?&gt;;
                  @endforeach
                &lt;/tbody&gt;;
            &lt;/table&gt;;
        &lt;/div&gt;;



        public function index()
        {

            return  MsfResource::collection( Msf::all());

        }        
        
        public function store(Request $request)
        {
            $this->validate([
               
                
            'as'=>'required',

            ]);
            $msfs = new Msf();
            
            
        if($request->file('dfaasdf')) {
            $upload = $request->file('dfaasdf');
            $fileformat = time().$upload->getClientOriginalName();
            if ($upload->move('uploads/msfs/', $fileformat)) {
                $msfs->dfaasdf = $fileformat;
            }
        }

                $msfs->as = $request->as;
                $msfs->df = $request->df;

            if($msfs ->save()){
                return response()->json([ 
                        
                    'status'=>'S',
                        
                ]);
            }
            else{
                return response()->json([ 
            
                    'status'=>'F',            
                        
                ]);
            }

        }        
        
        public function update(Request $request, $id)
        {
          $this->validate($request,[
                
            'as'=>'required',
          ]);
        
          $msfs=Msf::findOrFail($id);
               
            
        if($request->file('dfaasdf')) {
            $upload = $request->file('dfaasdf');
            $fileformat = time().$upload->getClientOriginalName();
            if ($upload->move('uploads/msfs/', $fileformat)) {
                $msfs->dfaasdf = $fileformat;
            }
        }

                $msfs->as = $request->as;
                $msfs->df = $request->df;
        
          if($item->update()){
             return [
                 'status' => 'S',
             ];
          }else{
              return [
                  'status' => 'F',
              ];
          }
          return $request;   
             
        }        
        
        public function destroy($id)
        {
            $msfs = Msf::findOrFail($id);
                        if($msfs->dfaasdf !=="no-image.png"){
            unlink('uploads/msfs/'.$msfs->dfaasdf );
        } 
            if( Msf::where('id',$id)->delete()){
                return "S";
            }
            else{
                return "F";
            }
        }

        &lt;div class="box-header"&gt;;
          &lt;div class="row mt-3"&gt;;
              &lt;div class="col-md-6"&gt;;
                  &lt;h3 class="box-title text-color"&gt;;Slide Images&lt;/h3&gt;;

              &lt;/div&gt;;
              &lt;div class="col-md-6 text-right"&gt;;
                  &lt;a href="{{route('students.create')}}" class="btn btn-sm px-4 btn-custom"&gt;;&lt;i class="fa fa-plus"&gt;;&lt;/i&gt;;&nbsp; Add new Image&lt;/a&gt;;

              &lt;/div&gt;;
          &lt;/div&gt;;
       &lt;/div&gt;;
       &lt;div class="box-body"&gt;;
            &lt;table id="table_id" class="table display responsive nowrap" width="100%"&gt;;
                &lt;thead&gt;;
                      &lt;tr&gt;;
                      &lt;th&gt;;SR NO&lt;/th&gt;;&lt;br&gt;
                      &lt;th&gt; name&lt;/th&gt;&lt;br&gt;&lt;th&gt; class&lt;/th&gt;&lt;br&gt;&lt;th&gt; rollno&lt;/th&gt;&lt;br&gt;&lt;th&gt; date&lt;/th&gt;&lt;br&gt;
                      &lt;th&gt;;Action&lt;/th&gt;;
                      &lt;/tr&gt;;
                &lt;/thead&gt;;
                &lt;tbody&gt;;
                      &lt;?php $i=1;?&gt;;
                  @foreach($students as $student)
                      &lt;tr&gt;;
                      &lt;td&gt;;{{$i}}&lt;/td&gt;;&lt;br&gt;
                      
                      &lt;td&gt;{{$student-&gt;name}}&lt;/td&gt;&lt;br&gt;&lt;td&gt;{{$student-&gt;class}}&lt;/td&gt;&lt;br&gt;&lt;td&gt;{{$student-&gt;rollno}}&lt;/td&gt;&lt;br&gt;&lt;td&gt;{{$student-&gt;date}}&lt;/td&gt;&lt;br&gt;

                      &lt;td&gt;;
                          &lt;div class="row"&gt;;
                              &lt;div class="col-md-2"&gt;;
                                  &lt;a href="{{route('students.edit',$student -&gt;id)}}" class=" " style="margin-left: 5px;"&gt;;&lt;i class="fa fa-edit icon fa-1x"&gt;;&lt;/i&gt;; &lt;/a&gt;;

                              &lt;/div&gt;;
                              &lt;div class="col-md-2"&gt;;
                                  &lt;form action="{{ route('students.destroy',$student -&gt;id)}}" method="POST"&gt;;
                                      @csrf
                                      @method('DELETE')
                                      &lt;button type="submit"  class="" style="margin-left: 5px;"&gt;;
                                          &lt;i class="fa fa-trash icon fa-1x"&gt;;&lt;/i&gt;;&lt;/button&gt;;
                                  &lt;/form&gt;;
                              &lt;/div&gt;;
                              &lt;div class="col-md-2"&gt;;
                                  &lt;a href="{{route('students.show',$student -&gt;id)}}" style="margin-left: 5px;" class="icon"&gt;;&lt;i class="fa fa-eye  fa-1x" &gt;;&lt;/i&gt;;&ensp;&lt;/span&gt;;&lt;/a&gt;;

                              &lt;/div&gt;;
                          &lt;/div&gt;;
                      &lt;/td&gt;;
                      &lt;/tr&gt;;
                  &lt;?php $i++?&gt;;
                  @endforeach
                &lt;/tbody&gt;;
            &lt;/table&gt;;
        &lt;/div&gt;;



        public function index()
        {

            return  StudentResource::collection( Student::all());

        }        
        
        public function store(Request $request)
        {
            $this->validate([
               
                

            ]);
            $students = new Student();
            
            
                $students->name = $request->name;
                $students->class = $request->class;
                $students->rollno = $request->rollno;
                $students->date = $request->date;

            if($students ->save()){
                return response()->json([ 
                        
                    'status'=>'S',
                        
                ]);
            }
            else{
                return response()->json([ 
            
                    'status'=>'F',            
                        
                ]);
            }

        }        
        
        public function update(Request $request, $id)
        {
          $this->validate($request,[
                
          ]);
        
          $students=Student::findOrFail($id);
               
            
                $students->name = $request->name;
                $students->class = $request->class;
                $students->rollno = $request->rollno;
                $students->date = $request->date;
        
          if($item->update()){
             return [
                 'status' => 'S',
             ];
          }else{
              return [
                  'status' => 'F',
              ];
          }
          return $request;   
             
        }        
        
        public function destroy($id)
        {
            $students = Student::findOrFail($id);
                 
            if( Student::where('id',$id)->delete()){
                return "S";
            }
            else{
                return "F";
            }
        }

        &lt;div class="box-header"&gt;;
          &lt;div class="row mt-3"&gt;;
              &lt;div class="col-md-6"&gt;;
                  &lt;h3 class="box-title text-color"&gt;;Slide Images&lt;/h3&gt;;

              &lt;/div&gt;;
              &lt;div class="col-md-6 text-right"&gt;;
                  &lt;a href="{{route('students.create')}}" class="btn btn-sm px-4 btn-custom"&gt;;&lt;i class="fa fa-plus"&gt;;&lt;/i&gt;;&nbsp; Add new Image&lt;/a&gt;;

              &lt;/div&gt;;
          &lt;/div&gt;;
       &lt;/div&gt;;
       &lt;div class="box-body"&gt;;
            &lt;table id="table_id" class="table display responsive nowrap" width="100%"&gt;;
                &lt;thead&gt;;
                      &lt;tr&gt;;
                      &lt;th&gt;;SR NO&lt;/th&gt;;&lt;br&gt;
                      &lt;th&gt; name&lt;/th&gt;&lt;br&gt;&lt;th&gt; class&lt;/th&gt;&lt;br&gt;&lt;th&gt; date&lt;/th&gt;&lt;br&gt;
                      &lt;th&gt;;Action&lt;/th&gt;;
                      &lt;/tr&gt;;
                &lt;/thead&gt;;
                &lt;tbody&gt;;
                      &lt;?php $i=1;?&gt;;
                  @foreach($students as $student)
                      &lt;tr&gt;;
                      &lt;td&gt;;{{$i}}&lt;/td&gt;;&lt;br&gt;
                      
                      &lt;td&gt;{{$student-&gt;name}}&lt;/td&gt;&lt;br&gt;&lt;td&gt;{{$student-&gt;class}}&lt;/td&gt;&lt;br&gt;&lt;td&gt;&lt;img src="{{asset("uploads/student/".$student-&gt;rollno )}}" width=100&gt;&lt;/td&gt;&lt;br&gt;&lt;td&gt;{{$student-&gt;date}}&lt;/td&gt;&lt;br&gt;

                      &lt;td&gt;;
                          &lt;div class="row"&gt;;
                              &lt;div class="col-md-2"&gt;;
                                  &lt;a href="{{route('students.edit',$student -&gt;id)}}" class=" " style="margin-left: 5px;"&gt;;&lt;i class="fa fa-edit icon fa-1x"&gt;;&lt;/i&gt;; &lt;/a&gt;;

                              &lt;/div&gt;;
                              &lt;div class="col-md-2"&gt;;
                                  &lt;form action="{{ route('students.destroy',$student -&gt;id)}}" method="POST"&gt;;
                                      @csrf
                                      @method('DELETE')
                                      &lt;button type="submit"  class="" style="margin-left: 5px;"&gt;;
                                          &lt;i class="fa fa-trash icon fa-1x"&gt;;&lt;/i&gt;;&lt;/button&gt;;
                                  &lt;/form&gt;;
                              &lt;/div&gt;;
                              &lt;div class="col-md-2"&gt;;
                                  &lt;a href="{{route('students.show',$student -&gt;id)}}" style="margin-left: 5px;" class="icon"&gt;;&lt;i class="fa fa-eye  fa-1x" &gt;;&lt;/i&gt;;&ensp;&lt;/span&gt;;&lt;/a&gt;;

                              &lt;/div&gt;;
                          &lt;/div&gt;;
                      &lt;/td&gt;;
                      &lt;/tr&gt;;
                  &lt;?php $i++?&gt;;
                  @endforeach
                &lt;/tbody&gt;;
            &lt;/table&gt;;
        &lt;/div&gt;;



        public function index()
        {

            return  StudentResource::collection( Student::all());

        }        
        
        public function store(Request $request)
        {
            $this->validate([
               
                
            'class'=>'required',

            ]);
            $students = new Student();
            
            
                $students->name = $request->name;
                $students->class = $request->class;
        if($request->file('rollno')) {
            $upload = $request->file('rollno');
            $fileformat = time().$upload->getClientOriginalName();
            if ($upload->move('uploads/students/', $fileformat)) {
                $students->rollno = $fileformat;
            }
        }

                $students->date = $request->date;

            if($students ->save()){
                return response()->json([ 
                        
                    'status'=>'S',
                        
                ]);
            }
            else{
                return response()->json([ 
            
                    'status'=>'F',            
                        
                ]);
            }

        }        
        
        public function update(Request $request, $id)
        {
          $this->validate($request,[
                
            'class'=>'required',
          ]);
        
          $students=Student::findOrFail($id);
               
            
                $students->name = $request->name;
                $students->class = $request->class;
        if($request->file('rollno')) {
            $upload = $request->file('rollno');
            $fileformat = time().$upload->getClientOriginalName();
            if ($upload->move('uploads/students/', $fileformat)) {
                $students->rollno = $fileformat;
            }
        }

                $students->date = $request->date;
        
          if($item->update()){
             return [
                 'status' => 'S',
             ];
          }else{
              return [
                  'status' => 'F',
              ];
          }
          return $request;   
             
        }        
        
        public function destroy($id)
        {
            $students = Student::findOrFail($id);
                        if($students->rollno !=="no-image.png"){
            unlink('uploads/students/'.$students->rollno );
        } 
            if( Student::where('id',$id)->delete()){
                return "S";
            }
            else{
                return "F";
            }
        }

        &lt;div class="box-header"&gt;;
          &lt;div class="row mt-3"&gt;;
              &lt;div class="col-md-6"&gt;;
                  &lt;h3 class="box-title text-color"&gt;;Slide Images&lt;/h3&gt;;

              &lt;/div&gt;;
              &lt;div class="col-md-6 text-right"&gt;;
                  &lt;a href="{{route('asdfs.create')}}" class="btn btn-sm px-4 btn-custom"&gt;;&lt;i class="fa fa-plus"&gt;;&lt;/i&gt;;&nbsp; Add new Image&lt;/a&gt;;

              &lt;/div&gt;;
          &lt;/div&gt;;
       &lt;/div&gt;;
       &lt;div class="box-body"&gt;;
            &lt;table id="table_id" class="table display responsive nowrap" width="100%"&gt;;
                &lt;thead&gt;;
                      &lt;tr&gt;;
                      &lt;th&gt;;SR NO&lt;/th&gt;;&lt;br&gt;
                      &lt;th&gt; asdff&lt;/th&gt;&lt;br&gt;&lt;th&gt; dsa&lt;/th&gt;&lt;br&gt;&lt;th&gt; ads&lt;/th&gt;&lt;br&gt;
                      &lt;th&gt;;Action&lt;/th&gt;;
                      &lt;/tr&gt;;
                &lt;/thead&gt;;
                &lt;tbody&gt;;
                      &lt;?php $i=1;?&gt;;
                  @foreach($asdfs as $asdf)
                      &lt;tr&gt;;
                      &lt;td&gt;;{{$i}}&lt;/td&gt;;&lt;br&gt;
                      
                      &lt;td&gt;{{$asdf-&gt;asdff}}&lt;/td&gt;&lt;br&gt;&lt;td&gt;{{$asdf-&gt;dsa}}&lt;/td&gt;&lt;br&gt;&lt;td&gt;{{$asdf-&gt;ads}}&lt;/td&gt;&lt;br&gt;

                      &lt;td&gt;;
                          &lt;div class="row"&gt;;
                              &lt;div class="col-md-2"&gt;;
                                  &lt;a href="{{route('asdfs.edit',$asdf -&gt;id)}}" class=" " style="margin-left: 5px;"&gt;;&lt;i class="fa fa-edit icon fa-1x"&gt;;&lt;/i&gt;; &lt;/a&gt;;

                              &lt;/div&gt;;
                              &lt;div class="col-md-2"&gt;;
                                  &lt;form action="{{ route('asdfs.destroy',$asdf -&gt;id)}}" method="POST"&gt;;
                                      @csrf
                                      @method('DELETE')
                                      &lt;button type="submit"  class="" style="margin-left: 5px;"&gt;;
                                          &lt;i class="fa fa-trash icon fa-1x"&gt;;&lt;/i&gt;;&lt;/button&gt;;
                                  &lt;/form&gt;;
                              &lt;/div&gt;;
                              &lt;div class="col-md-2"&gt;;
                                  &lt;a href="{{route('asdfs.show',$asdf -&gt;id)}}" style="margin-left: 5px;" class="icon"&gt;;&lt;i class="fa fa-eye  fa-1x" &gt;;&lt;/i&gt;;&ensp;&lt;/span&gt;;&lt;/a&gt;;

                              &lt;/div&gt;;
                          &lt;/div&gt;;
                      &lt;/td&gt;;
                      &lt;/tr&gt;;
                  &lt;?php $i++?&gt;;
                  @endforeach
                &lt;/tbody&gt;;
            &lt;/table&gt;;
        &lt;/div&gt;;



        public function index()
        {

            return  AsdfResource::collection( Asdf::all());

        }        
        
        public function store(Request $request)
        {
            $this->validate([
               
                

            ]);
            $asdfs = new Asdf();
            
            
                $asdfs->asdff = $request->asdff;
                $asdfs->dsa = $request->dsa;
                $asdfs->ads = $request->ads;

            if($asdfs ->save()){
                return response()->json([ 
                        
                    'status'=>'S',
                        
                ]);
            }
            else{
                return response()->json([ 
            
                    'status'=>'F',            
                        
                ]);
            }

        }        
        
        public function update(Request $request, $id)
        {
          $this->validate($request,[
                
          ]);
        
          $asdfs=Asdf::findOrFail($id);
               
            
                $asdfs->asdff = $request->asdff;
                $asdfs->dsa = $request->dsa;
                $asdfs->ads = $request->ads;
        
          if($item->update()){
             return [
                 'status' => 'S',
             ];
          }else{
              return [
                  'status' => 'F',
              ];
          }
          return $request;   
             
        }        
        
        public function destroy($id)
        {
            $asdfs = Asdf::findOrFail($id);
                 
            if( Asdf::where('id',$id)->delete()){
                return "S";
            }
            else{
                return "F";
            }
        }

        &lt;div class="box-header"&gt;;
          &lt;div class="row mt-3"&gt;;
              &lt;div class="col-md-6"&gt;;
                  &lt;h3 class="box-title text-color"&gt;;Slide Images&lt;/h3&gt;;

              &lt;/div&gt;;
              &lt;div class="col-md-6 text-right"&gt;;
                  &lt;a href="{{route('asdfs.create')}}" class="btn btn-sm px-4 btn-custom"&gt;;&lt;i class="fa fa-plus"&gt;;&lt;/i&gt;;&nbsp; Add new Image&lt;/a&gt;;

              &lt;/div&gt;;
          &lt;/div&gt;;
       &lt;/div&gt;;
       &lt;div class="box-body"&gt;;
            &lt;table id="table_id" class="table display responsive nowrap" width="100%"&gt;;
                &lt;thead&gt;;
                      &lt;tr&gt;;
                      &lt;th&gt;;SR NO&lt;/th&gt;;&lt;br&gt;
                      &lt;th&gt; fds&lt;/th&gt;&lt;br&gt;&lt;th&gt; &lt;/th&gt;&lt;br&gt;
                      &lt;th&gt;;Action&lt;/th&gt;;
                      &lt;/tr&gt;;
                &lt;/thead&gt;;
                &lt;tbody&gt;;
                      &lt;?php $i=1;?&gt;;
                  @foreach($asdfs as $asdf)
                      &lt;tr&gt;;
                      &lt;td&gt;;{{$i}}&lt;/td&gt;;&lt;br&gt;
                      
                      &lt;td&gt;{{$asdf-&gt;fds}}&lt;/td&gt;&lt;br&gt;&lt;td&gt;{{$asdf-&gt;}}&lt;/td&gt;&lt;br&gt;

                      &lt;td&gt;;
                          &lt;div class="row"&gt;;
                              &lt;div class="col-md-2"&gt;;
                                  &lt;a href="{{route('asdfs.edit',$asdf -&gt;id)}}" class=" " style="margin-left: 5px;"&gt;;&lt;i class="fa fa-edit icon fa-1x"&gt;;&lt;/i&gt;; &lt;/a&gt;;

                              &lt;/div&gt;;
                              &lt;div class="col-md-2"&gt;;
                                  &lt;form action="{{ route('asdfs.destroy',$asdf -&gt;id)}}" method="POST"&gt;;
                                      @csrf
                                      @method('DELETE')
                                      &lt;button type="submit"  class="" style="margin-left: 5px;"&gt;;
                                          &lt;i class="fa fa-trash icon fa-1x"&gt;;&lt;/i&gt;;&lt;/button&gt;;
                                  &lt;/form&gt;;
                              &lt;/div&gt;;
                              &lt;div class="col-md-2"&gt;;
                                  &lt;a href="{{route('asdfs.show',$asdf -&gt;id)}}" style="margin-left: 5px;" class="icon"&gt;;&lt;i class="fa fa-eye  fa-1x" &gt;;&lt;/i&gt;;&ensp;&lt;/span&gt;;&lt;/a&gt;;

                              &lt;/div&gt;;
                          &lt;/div&gt;;
                      &lt;/td&gt;;
                      &lt;/tr&gt;;
                  &lt;?php $i++?&gt;;
                  @endforeach
                &lt;/tbody&gt;;
            &lt;/table&gt;;
        &lt;/div&gt;;



        public function index()
        {

            return  AsdfResource::collection( Asdf::all());

        }        
        
        public function store(Request $request)
        {
            $this->validate([
               
                

            ]);
            $asdfs = new Asdf();
            
            
                $asdfs->fds = $request->fds;
                $asdfs-> = $request->;

            if($asdfs ->save()){
                return response()->json([ 
                        
                    'status'=>'S',
                        
                ]);
            }
            else{
                return response()->json([ 
            
                    'status'=>'F',            
                        
                ]);
            }

        }        
        
        public function update(Request $request, $id)
        {
          $this->validate($request,[
                
          ]);
        
          $asdfs=Asdf::findOrFail($id);
               
            
                $asdfs->fds = $request->fds;
                $asdfs-> = $request->;
        
          if($item->update()){
             return [
                 'status' => 'S',
             ];
          }else{
              return [
                  'status' => 'F',
              ];
          }
          return $request;   
             
        }        
        
        public function destroy($id)
        {
            $asdfs = Asdf::findOrFail($id);
                 
            if( Asdf::where('id',$id)->delete()){
                return "S";
            }
            else{
                return "F";
            }
        }

        &lt;div class="box-header"&gt;;
          &lt;div class="row mt-3"&gt;;
              &lt;div class="col-md-6"&gt;;
                  &lt;h3 class="box-title text-color"&gt;;Slide Images&lt;/h3&gt;;

              &lt;/div&gt;;
              &lt;div class="col-md-6 text-right"&gt;;
                  &lt;a href="{{route('asdfs.create')}}" class="btn btn-sm px-4 btn-custom"&gt;;&lt;i class="fa fa-plus"&gt;;&lt;/i&gt;;&nbsp; Add new Image&lt;/a&gt;;

              &lt;/div&gt;;
          &lt;/div&gt;;
       &lt;/div&gt;;
       &lt;div class="box-body"&gt;;
            &lt;table id="table_id" class="table display responsive nowrap" width="100%"&gt;;
                &lt;thead&gt;;
                      &lt;tr&gt;;
                      &lt;th&gt;;SR NO&lt;/th&gt;;&lt;br&gt;
                      &lt;th&gt; fds&lt;/th&gt;&lt;br&gt;&lt;th&gt; asdf&lt;/th&gt;&lt;br&gt;&lt;th&gt; &lt;/th&gt;&lt;br&gt;
                      &lt;th&gt;;Action&lt;/th&gt;;
                      &lt;/tr&gt;;
                &lt;/thead&gt;;
                &lt;tbody&gt;;
                      &lt;?php $i=1;?&gt;;
                  @foreach($asdfs as $asdf)
                      &lt;tr&gt;;
                      &lt;td&gt;;{{$i}}&lt;/td&gt;;&lt;br&gt;
                      
                      &lt;td&gt;{{$asdf-&gt;fds}}&lt;/td&gt;&lt;br&gt;&lt;td&gt;{{$asdf-&gt;asdf}}&lt;/td&gt;&lt;br&gt;&lt;td&gt;{{$asdf-&gt;}}&lt;/td&gt;&lt;br&gt;

                      &lt;td&gt;;
                          &lt;div class="row"&gt;;
                              &lt;div class="col-md-2"&gt;;
                                  &lt;a href="{{route('asdfs.edit',$asdf -&gt;id)}}" class=" " style="margin-left: 5px;"&gt;;&lt;i class="fa fa-edit icon fa-1x"&gt;;&lt;/i&gt;; &lt;/a&gt;;

                              &lt;/div&gt;;
                              &lt;div class="col-md-2"&gt;;
                                  &lt;form action="{{ route('asdfs.destroy',$asdf -&gt;id)}}" method="POST"&gt;;
                                      @csrf
                                      @method('DELETE')
                                      &lt;button type="submit"  class="" style="margin-left: 5px;"&gt;;
                                          &lt;i class="fa fa-trash icon fa-1x"&gt;;&lt;/i&gt;;&lt;/button&gt;;
                                  &lt;/form&gt;;
                              &lt;/div&gt;;
                              &lt;div class="col-md-2"&gt;;
                                  &lt;a href="{{route('asdfs.show',$asdf -&gt;id)}}" style="margin-left: 5px;" class="icon"&gt;;&lt;i class="fa fa-eye  fa-1x" &gt;;&lt;/i&gt;;&ensp;&lt;/span&gt;;&lt;/a&gt;;

                              &lt;/div&gt;;
                          &lt;/div&gt;;
                      &lt;/td&gt;;
                      &lt;/tr&gt;;
                  &lt;?php $i++?&gt;;
                  @endforeach
                &lt;/tbody&gt;;
            &lt;/table&gt;;
        &lt;/div&gt;;



        public function index()
        {

            return  AsdfResource::collection( Asdf::all());

        }        
        
        public function store(Request $request)
        {
            $this->validate([
               
                

            ]);
            $asdfs = new Asdf();
            
            
                $asdfs->fds = $request->fds;
                $asdfs->asdf = $request->asdf;
                $asdfs-> = $request->;

            if($asdfs ->save()){
                return response()->json([ 
                        
                    'status'=>'S',
                        
                ]);
            }
            else{
                return response()->json([ 
            
                    'status'=>'F',            
                        
                ]);
            }

        }        
        
        public function update(Request $request, $id)
        {
          $this->validate($request,[
                
          ]);
        
          $asdfs=Asdf::findOrFail($id);
               
            
                $asdfs->fds = $request->fds;
                $asdfs->asdf = $request->asdf;
                $asdfs-> = $request->;
        
          if($item->update()){
             return [
                 'status' => 'S',
             ];
          }else{
              return [
                  'status' => 'F',
              ];
          }
          return $request;   
             
        }        
        
        public function destroy($id)
        {
            $asdfs = Asdf::findOrFail($id);
                 
            if( Asdf::where('id',$id)->delete()){
                return "S";
            }
            else{
                return "F";
            }
        }

        &lt;div class="box-header"&gt;;
          &lt;div class="row mt-3"&gt;;
              &lt;div class="col-md-6"&gt;;
                  &lt;h3 class="box-title text-color"&gt;;Slide Images&lt;/h3&gt;;

              &lt;/div&gt;;
              &lt;div class="col-md-6 text-right"&gt;;
                  &lt;a href="{{route('asdfs.create')}}" class="btn btn-sm px-4 btn-custom"&gt;;&lt;i class="fa fa-plus"&gt;;&lt;/i&gt;;&nbsp; Add new Image&lt;/a&gt;;

              &lt;/div&gt;;
          &lt;/div&gt;;
       &lt;/div&gt;;
       &lt;div class="box-body"&gt;;
            &lt;table id="table_id" class="table display responsive nowrap" width="100%"&gt;;
                &lt;thead&gt;;
                      &lt;tr&gt;;
                      &lt;th&gt;;SR NO&lt;/th&gt;;&lt;br&gt;
                      &lt;th&gt; fds&lt;/th&gt;&lt;br&gt;&lt;th&gt; gfds&lt;/th&gt;&lt;br&gt;&lt;th&gt; &lt;/th&gt;&lt;br&gt;
                      &lt;th&gt;;Action&lt;/th&gt;;
                      &lt;/tr&gt;;
                &lt;/thead&gt;;
                &lt;tbody&gt;;
                      &lt;?php $i=1;?&gt;;
                  @foreach($asdfs as $asdf)
                      &lt;tr&gt;;
                      &lt;td&gt;;{{$i}}&lt;/td&gt;;&lt;br&gt;
                      
                      &lt;td&gt;{{$asdf-&gt;fds}}&lt;/td&gt;&lt;br&gt;&lt;td&gt;&lt;img src="{{asset("uploads/asdf/".$asdf-&gt;asdf )}}" width=100&gt;&lt;/td&gt;&lt;br&gt;&lt;td&gt;{{$asdf-&gt;gfds}}&lt;/td&gt;&lt;br&gt;&lt;td&gt;{{$asdf-&gt;}}&lt;/td&gt;&lt;br&gt;

                      &lt;td&gt;;
                          &lt;div class="row"&gt;;
                              &lt;div class="col-md-2"&gt;;
                                  &lt;a href="{{route('asdfs.edit',$asdf -&gt;id)}}" class=" " style="margin-left: 5px;"&gt;;&lt;i class="fa fa-edit icon fa-1x"&gt;;&lt;/i&gt;; &lt;/a&gt;;

                              &lt;/div&gt;;
                              &lt;div class="col-md-2"&gt;;
                                  &lt;form action="{{ route('asdfs.destroy',$asdf -&gt;id)}}" method="POST"&gt;;
                                      @csrf
                                      @method('DELETE')
                                      &lt;button type="submit"  class="" style="margin-left: 5px;"&gt;;
                                          &lt;i class="fa fa-trash icon fa-1x"&gt;;&lt;/i&gt;;&lt;/button&gt;;
                                  &lt;/form&gt;;
                              &lt;/div&gt;;
                              &lt;div class="col-md-2"&gt;;
                                  &lt;a href="{{route('asdfs.show',$asdf -&gt;id)}}" style="margin-left: 5px;" class="icon"&gt;;&lt;i class="fa fa-eye  fa-1x" &gt;;&lt;/i&gt;;&ensp;&lt;/span&gt;;&lt;/a&gt;;

                              &lt;/div&gt;;
                          &lt;/div&gt;;
                      &lt;/td&gt;;
                      &lt;/tr&gt;;
                  &lt;?php $i++?&gt;;
                  @endforeach
                &lt;/tbody&gt;;
            &lt;/table&gt;;
        &lt;/div&gt;;



        public function index()
        {

            return  AsdfResource::collection( Asdf::all());

        }        
        
        public function store(Request $request)
        {
            $this->validate([
               
                
            'fds'=>'required',

            ]);
            $asdfs = new Asdf();
            
            
                $asdfs->fds = $request->fds;
        if($request->file('asdf')) {
            $upload = $request->file('asdf');
            $fileformat = time().$upload->getClientOriginalName();
            if ($upload->move('uploads/asdfs/', $fileformat)) {
                $asdfs->asdf = $fileformat;
            }
        }

                $asdfs->gfds = $request->gfds;
                $asdfs-> = $request->;

            if($asdfs ->save()){
                return response()->json([ 
                        
                    'status'=>'S',
                        
                ]);
            }
            else{
                return response()->json([ 
            
                    'status'=>'F',            
                        
                ]);
            }

        }        
        
        public function update(Request $request, $id)
        {
          $this->validate($request,[
                
            'fds'=>'required',
          ]);
        
          $asdfs=Asdf::findOrFail($id);
               
            
                $asdfs->fds = $request->fds;
        if($request->file('asdf')) {
            $upload = $request->file('asdf');
            $fileformat = time().$upload->getClientOriginalName();
            if ($upload->move('uploads/asdfs/', $fileformat)) {
                $asdfs->asdf = $fileformat;
            }
        }

                $asdfs->gfds = $request->gfds;
                $asdfs-> = $request->;
        
          if($item->update()){
             return [
                 'status' => 'S',
             ];
          }else{
              return [
                  'status' => 'F',
              ];
          }
          return $request;   
             
        }        
        
        public function destroy($id)
        {
            $asdfs = Asdf::findOrFail($id);
                        if($asdfs->asdf !=="no-image.png"){
            unlink('uploads/asdfs/'.$asdfs->asdf );
        } 
            if( Asdf::where('id',$id)->delete()){
                return "S";
            }
            else{
                return "F";
            }
        }

        &lt;div class="box-header"&gt;;
          &lt;div class="row mt-3"&gt;;
              &lt;div class="col-md-6"&gt;;
                  &lt;h3 class="box-title text-color"&gt;;Slide Images&lt;/h3&gt;;

              &lt;/div&gt;;
              &lt;div class="col-md-6 text-right"&gt;;
                  &lt;a href="{{route('asdfs.create')}}" class="btn btn-sm px-4 btn-custom"&gt;;&lt;i class="fa fa-plus"&gt;;&lt;/i&gt;;&nbsp; Add new Image&lt;/a&gt;;

              &lt;/div&gt;;
          &lt;/div&gt;;
       &lt;/div&gt;;
       &lt;div class="box-body"&gt;;
            &lt;table id="table_id" class="table display responsive nowrap" width="100%"&gt;;
                &lt;thead&gt;;
                      &lt;tr&gt;;
                      &lt;th&gt;;SR NO&lt;/th&gt;;&lt;br&gt;
                      &lt;th&gt; fds&lt;/th&gt;&lt;br&gt;&lt;th&gt; sdfg&lt;/th&gt;&lt;br&gt;&lt;th&gt; &lt;/th&gt;&lt;br&gt;
                      &lt;th&gt;;Action&lt;/th&gt;;
                      &lt;/tr&gt;;
                &lt;/thead&gt;;
                &lt;tbody&gt;;
                      &lt;?php $i=1;?&gt;;
                  @foreach($asdfs as $asdf)
                      &lt;tr&gt;;
                      &lt;td&gt;;{{$i}}&lt;/td&gt;;&lt;br&gt;
                      
                      &lt;td&gt;{{$asdf-&gt;fds}}&lt;/td&gt;&lt;br&gt;&lt;td&gt;&lt;img src="{{asset("uploads/asdf/".$asdf-&gt;asdf )}}" width=100&gt;&lt;/td&gt;&lt;br&gt;&lt;td&gt;&lt;img src="{{asset("uploads/asdf/".$asdf-&gt;gfds )}}" width=100&gt;&lt;/td&gt;&lt;br&gt;&lt;td&gt;{{$asdf-&gt;sdfg}}&lt;/td&gt;&lt;br&gt;&lt;td&gt;{{$asdf-&gt;}}&lt;/td&gt;&lt;br&gt;

                      &lt;td&gt;;
                          &lt;div class="row"&gt;;
                              &lt;div class="col-md-2"&gt;;
                                  &lt;a href="{{route('asdfs.edit',$asdf -&gt;id)}}" class=" " style="margin-left: 5px;"&gt;;&lt;i class="fa fa-edit icon fa-1x"&gt;;&lt;/i&gt;; &lt;/a&gt;;

                              &lt;/div&gt;;
                              &lt;div class="col-md-2"&gt;;
                                  &lt;form action="{{ route('asdfs.destroy',$asdf -&gt;id)}}" method="POST"&gt;;
                                      @csrf
                                      @method('DELETE')
                                      &lt;button type="submit"  class="" style="margin-left: 5px;"&gt;;
                                          &lt;i class="fa fa-trash icon fa-1x"&gt;;&lt;/i&gt;;&lt;/button&gt;;
                                  &lt;/form&gt;;
                              &lt;/div&gt;;
                              &lt;div class="col-md-2"&gt;;
                                  &lt;a href="{{route('asdfs.show',$asdf -&gt;id)}}" style="margin-left: 5px;" class="icon"&gt;;&lt;i class="fa fa-eye  fa-1x" &gt;;&lt;/i&gt;;&ensp;&lt;/span&gt;;&lt;/a&gt;;

                              &lt;/div&gt;;
                          &lt;/div&gt;;
                      &lt;/td&gt;;
                      &lt;/tr&gt;;
                  &lt;?php $i++?&gt;;
                  @endforeach
                &lt;/tbody&gt;;
            &lt;/table&gt;;
        &lt;/div&gt;;



        public function index()
        {

            return  AsdfResource::collection( Asdf::all());

        }        
        
        public function store(Request $request)
        {
            $this->validate([
               
                
            'fds'=>'required',
            'sdfg'=>'required',

            ]);
            $asdfs = new Asdf();
            
            
                $asdfs->fds = $request->fds;
        if($request->file('asdf')) {
            $upload = $request->file('asdf');
            $fileformat = time().$upload->getClientOriginalName();
            if ($upload->move('uploads/asdfs/', $fileformat)) {
                $asdfs->asdf = $fileformat;
            }
        }

        if($request->file('gfds')) {
            $upload = $request->file('gfds');
            $fileformat = time().$upload->getClientOriginalName();
            if ($upload->move('uploads/asdfs/', $fileformat)) {
                $asdfs->gfds = $fileformat;
            }
        }

                $asdfs->sdfg = $request->sdfg;
                $asdfs-> = $request->;

            if($asdfs ->save()){
                return response()->json([ 
                        
                    'status'=>'S',
                        
                ]);
            }
            else{
                return response()->json([ 
            
                    'status'=>'F',            
                        
                ]);
            }

        }        
        
        public function update(Request $request, $id)
        {
          $this->validate($request,[
                
            'fds'=>'required',
            'sdfg'=>'required',
          ]);
        
          $asdfs=Asdf::findOrFail($id);
               
            
                $asdfs->fds = $request->fds;
        if($request->file('asdf')) {
            $upload = $request->file('asdf');
            $fileformat = time().$upload->getClientOriginalName();
            if ($upload->move('uploads/asdfs/', $fileformat)) {
                $asdfs->asdf = $fileformat;
            }
        }

        if($request->file('gfds')) {
            $upload = $request->file('gfds');
            $fileformat = time().$upload->getClientOriginalName();
            if ($upload->move('uploads/asdfs/', $fileformat)) {
                $asdfs->gfds = $fileformat;
            }
        }

                $asdfs->sdfg = $request->sdfg;
                $asdfs-> = $request->;
        
          if($item->update()){
             return [
                 'status' => 'S',
             ];
          }else{
              return [
                  'status' => 'F',
              ];
          }
          return $request;   
             
        }        
        
        public function destroy($id)
        {
            $asdfs = Asdf::findOrFail($id);
                        if($asdfs->gfds !=="no-image.png"){
            unlink('uploads/asdfs/'.$asdfs->gfds );
        } 
            if( Asdf::where('id',$id)->delete()){
                return "S";
            }
            else{
                return "F";
            }
        }



        public function index()
        {
          $students = Student::orderBy('updated_at','desc')->get();
          
          return view('.students.index',compact('students')); 
        }

        public function create()
        {
          return view('.students.create');
        }        
        
        public function store(Request $request)
        {
           $this->validate($request,
                 
          ]);
          $students  = new Student();
          
                $students->place = $request->place;
                $students-> = $request->;
          if($students ->save()){
              return redirect()->back()->with('success',' Student Added successfully.');
          }
          else{
              return redirect()->back()->with('unsuccess','Failed try again.');
          }
        
        }

        public function show($id)
        {
          $students = Student::findOrFail($id);
          return view('.students.show',compact('students'));
        };

        public function edit($id)
        {
            $students = Student::findOrFail($id);
            return view('.students.edit',compact('students'));
        }        
        
        public function update(Request $request, $id)
        {
            $this->validate($request,[ 
                 
            ]);

            $students = Student::findOrFail($id);
                
                $students->place = $request->place;
                $students-> = $request->;

            if($students ->update()){
                return redirect()->back()->with('success','  students  Added successfully.');
            }
            else{
                return redirect()->back()->with('unsuccess','Failed try again.');
            }
            
        }        
        
        public function destroy($id)
{
  $students = Student::findOrFail($id);
     
  if( Student::where('id',$id)->delete()){
   return redirect()->back()->with('success','  students  deleted successfully.');
  }
  else{
      return redirect()->back()->with('unsuccess','Failed try again.');
  }
}



        public function index()
        {
          $students = Student::orderBy('updated_at','desc')->get();
          
          return view('.students.index',compact('students')); 
        }

        public function create()
        {
          return view('.students.create');
        }        
        
        public function store(Request $request)
        {
           $this->validate($request,
                 
          ]);
          $students  = new Student();
          
                $students->place = $request->place;
                $students->class = $request->class;
                $students-> = $request->;
          if($students ->save()){
              return redirect()->back()->with('success',' Student Added successfully.');
          }
          else{
              return redirect()->back()->with('unsuccess','Failed try again.');
          }
        
        }

        public function show($id)
        {
          $students = Student::findOrFail($id);
          return view('.students.show',compact('students'));
        };

        public function edit($id)
        {
            $students = Student::findOrFail($id);
            return view('.students.edit',compact('students'));
        }        
        
        public function update(Request $request, $id)
        {
            $this->validate($request,[ 
                 
            ]);

            $students = Student::findOrFail($id);
                
                $students->place = $request->place;
                $students->class = $request->class;
                $students-> = $request->;

            if($students ->update()){
                return redirect()->back()->with('success','  students  Added successfully.');
            }
            else{
                return redirect()->back()->with('unsuccess','Failed try again.');
            }
            
        }        
        
        public function destroy($id)
{
  $students = Student::findOrFail($id);
     
  if( Student::where('id',$id)->delete()){
   return redirect()->back()->with('success','  students  deleted successfully.');
  }
  else{
      return redirect()->back()->with('unsuccess','Failed try again.');
  }
}



        public function index()
        {
          $students = Student::orderBy('updated_at','desc')->get();
          
          return view('.students.index',compact('students')); 
        }

        public function create()
        {
          return view('.students.create');
        }        
        
        public function store(Request $request)
        {
           $this->validate($request,
                 
          ]);
          $students  = new Student();
          
                $students->rollno = $request->rollno;
                $students-> = $request->;
          if($students ->save()){
              return redirect()->back()->with('success',' Student Added successfully.');
          }
          else{
              return redirect()->back()->with('unsuccess','Failed try again.');
          }
        
        }

        public function show($id)
        {
          $students = Student::findOrFail($id);
          return view('.students.show',compact('students'));
        };

        public function edit($id)
        {
            $students = Student::findOrFail($id);
            return view('.students.edit',compact('students'));
        }        
        
        public function update(Request $request, $id)
        {
            $this->validate($request,[ 
                 
            ]);

            $students = Student::findOrFail($id);
                
                $students->rollno = $request->rollno;
                $students-> = $request->;

            if($students ->update()){
                return redirect()->back()->with('success','  students  Added successfully.');
            }
            else{
                return redirect()->back()->with('unsuccess','Failed try again.');
            }
            
        }        
        
        public function destroy($id)
{
  $students = Student::findOrFail($id);
     
  if( Student::where('id',$id)->delete()){
   return redirect()->back()->with('success','  students  deleted successfully.');
  }
  else{
      return redirect()->back()->with('unsuccess','Failed try again.');
  }
}



        public function index()
        {
          $students = Student::orderBy('updated_at','desc')->get();
          
          return view('.students.index',compact('students')); 
        }

        public function create()
        {
          return view('.students.create');
        }        
        
        public function store(Request $request)
        {
           $this->validate($request,
                 
          ]);
          $students  = new Student();
          
                $students->rollno = $request->rollno;
                $students->class = $request->class;
                $students-> = $request->;
          if($students ->save()){
              return redirect()->back()->with('success',' Student Added successfully.');
          }
          else{
              return redirect()->back()->with('unsuccess','Failed try again.');
          }
        
        }

        public function show($id)
        {
          $students = Student::findOrFail($id);
          return view('.students.show',compact('students'));
        };

        public function edit($id)
        {
            $students = Student::findOrFail($id);
            return view('.students.edit',compact('students'));
        }        
        
        public function update(Request $request, $id)
        {
            $this->validate($request,[ 
                 
            ]);

            $students = Student::findOrFail($id);
                
                $students->rollno = $request->rollno;
                $students->class = $request->class;
                $students-> = $request->;

            if($students ->update()){
                return redirect()->back()->with('success','  students  Added successfully.');
            }
            else{
                return redirect()->back()->with('unsuccess','Failed try again.');
            }
            
        }        
        
        public function destroy($id)
{
  $students = Student::findOrFail($id);
     
  if( Student::where('id',$id)->delete()){
   return redirect()->back()->with('success','  students  deleted successfully.');
  }
  else{
      return redirect()->back()->with('unsuccess','Failed try again.');
  }
}



        public function index()
        {
          $students = Student::orderBy('updated_at','desc')->get();
          
          return view('.students.index',compact('students')); 
        }

        public function create()
        {
          return view('.students.create');
        }        
        
        public function store(Request $request)
        {
           $this->validate($request,
                 
          ]);
          $students  = new Student();
          
                $students->rollno = $request->rollno;
                $students->class = $request->class;
                $students->fees = $request->fees;
                $students-> = $request->;
          if($students ->save()){
              return redirect()->back()->with('success',' Student Added successfully.');
          }
          else{
              return redirect()->back()->with('unsuccess','Failed try again.');
          }
        
        }

        public function show($id)
        {
          $students = Student::findOrFail($id);
          return view('.students.show',compact('students'));
        };

        public function edit($id)
        {
            $students = Student::findOrFail($id);
            return view('.students.edit',compact('students'));
        }        
        
        public function update(Request $request, $id)
        {
            $this->validate($request,[ 
                 
            ]);

            $students = Student::findOrFail($id);
                
                $students->rollno = $request->rollno;
                $students->class = $request->class;
                $students->fees = $request->fees;
                $students-> = $request->;

            if($students ->update()){
                return redirect()->back()->with('success','  students  Added successfully.');
            }
            else{
                return redirect()->back()->with('unsuccess','Failed try again.');
            }
            
        }        
        
        public function destroy($id)
{
  $students = Student::findOrFail($id);
     
  if( Student::where('id',$id)->delete()){
   return redirect()->back()->with('success','  students  deleted successfully.');
  }
  else{
      return redirect()->back()->with('unsuccess','Failed try again.');
  }
}



        public function index()
        {
          $students = Student::orderBy('updated_at','desc')->get();
          
          return view('.students.index',compact('students')); 
        }

        public function create()
        {
          return view('.students.create');
        }        
        
        public function store(Request $request)
        {
           $this->validate($request,
                 
          ]);
          $students  = new Student();
          
                $students->rollno = $request->rollno;
                $students->class = $request->class;
                $students->fees = $request->fees;
                $students->address = $request->address;
                $students-> = $request->;
          if($students ->save()){
              return redirect()->back()->with('success',' Student Added successfully.');
          }
          else{
              return redirect()->back()->with('unsuccess','Failed try again.');
          }
        
        }

        public function show($id)
        {
          $students = Student::findOrFail($id);
          return view('.students.show',compact('students'));
        };

        public function edit($id)
        {
            $students = Student::findOrFail($id);
            return view('.students.edit',compact('students'));
        }        
        
        public function update(Request $request, $id)
        {
            $this->validate($request,[ 
                 
            ]);

            $students = Student::findOrFail($id);
                
                $students->rollno = $request->rollno;
                $students->class = $request->class;
                $students->fees = $request->fees;
                $students->address = $request->address;
                $students-> = $request->;

            if($students ->update()){
                return redirect()->back()->with('success','  students  Added successfully.');
            }
            else{
                return redirect()->back()->with('unsuccess','Failed try again.');
            }
            
        }        
        
        public function destroy($id)
{
  $students = Student::findOrFail($id);
     
  if( Student::where('id',$id)->delete()){
   return redirect()->back()->with('success','  students  deleted successfully.');
  }
  else{
      return redirect()->back()->with('unsuccess','Failed try again.');
  }
}



        public function index()
        {
          $students = Student::orderBy('updated_at','desc')->get();
          
          return view('.students.index',compact('students')); 
        }

        public function create()
        {
          return view('.students.create');
        }        
        
        public function store(Request $request)
        {
           $this->validate($request,
                 
          ]);
          $students  = new Student();
          
                $students->rollno = $request->rollno;
                $students->class = $request->class;
                $students->fees = $request->fees;
                $students->address = $request->address;
                $students->adfafd = $request->adfafd;
                $students-> = $request->;
          if($students ->save()){
              return redirect()->back()->with('success',' Student Added successfully.');
          }
          else{
              return redirect()->back()->with('unsuccess','Failed try again.');
          }
        
        }

        public function show($id)
        {
          $students = Student::findOrFail($id);
          return view('.students.show',compact('students'));
        };

        public function edit($id)
        {
            $students = Student::findOrFail($id);
            return view('.students.edit',compact('students'));
        }        
        
        public function update(Request $request, $id)
        {
            $this->validate($request,[ 
                 
            ]);

            $students = Student::findOrFail($id);
                
                $students->rollno = $request->rollno;
                $students->class = $request->class;
                $students->fees = $request->fees;
                $students->address = $request->address;
                $students->adfafd = $request->adfafd;
                $students-> = $request->;

            if($students ->update()){
                return redirect()->back()->with('success','  students  Added successfully.');
            }
            else{
                return redirect()->back()->with('unsuccess','Failed try again.');
            }
            
        }        
        
        public function destroy($id)
{
  $students = Student::findOrFail($id);
     
  if( Student::where('id',$id)->delete()){
   return redirect()->back()->with('success','  students  deleted successfully.');
  }
  else{
      return redirect()->back()->with('unsuccess','Failed try again.');
  }
}



        public function index()
        {
          $ads = Ad::orderBy('updated_at','desc')->get();
          
          return view('.ads.index',compact('ads')); 
        }

        public function create()
        {
          return view('.ads.create');
        }        
        
        public function store(Request $request)
        {
           $this->validate($request,
                 
          ]);
          $ads  = new Ad();
          
                $ads->gsdfg = $request->gsdfg;
                $ads-> = $request->;
          if($ads ->save()){
              return redirect()->back()->with('success',' Ad Added successfully.');
          }
          else{
              return redirect()->back()->with('unsuccess','Failed try again.');
          }
        
        }

        public function show($id)
        {
          $ads = Ad::findOrFail($id);
          return view('.ads.show',compact('ads'));
        };

        public function edit($id)
        {
            $ads = Ad::findOrFail($id);
            return view('.ads.edit',compact('ads'));
        }        
        
        public function update(Request $request, $id)
        {
            $this->validate($request,[ 
                 
            ]);

            $ads = Ad::findOrFail($id);
                
                $ads->gsdfg = $request->gsdfg;
                $ads-> = $request->;

            if($ads ->update()){
                return redirect()->back()->with('success','  ads  Added successfully.');
            }
            else{
                return redirect()->back()->with('unsuccess','Failed try again.');
            }
            
        }        
        
        public function destroy($id)
{
  $ads = Ad::findOrFail($id);
     
  if( Ad::where('id',$id)->delete()){
   return redirect()->back()->with('success','  ads  deleted successfully.');
  }
  else{
      return redirect()->back()->with('unsuccess','Failed try again.');
  }
}



        public function index()
        {
          $ads = Ad::orderBy('updated_at','desc')->get();
          
          return view('.ads.index',compact('ads')); 
        }

        public function create()
        {
          return view('.ads.create');
        }        
        
        public function store(Request $request)
        {
           $this->validate($request,
                 
          ]);
          $ads  = new Ad();
          
                $ads->gsdfg = $request->gsdfg;
                $ads->sdfg = $request->sdfg;
                $ads-> = $request->;
          if($ads ->save()){
              return redirect()->back()->with('success',' Ad Added successfully.');
          }
          else{
              return redirect()->back()->with('unsuccess','Failed try again.');
          }
        
        }

        public function show($id)
        {
          $ads = Ad::findOrFail($id);
          return view('.ads.show',compact('ads'));
        };

        public function edit($id)
        {
            $ads = Ad::findOrFail($id);
            return view('.ads.edit',compact('ads'));
        }        
        
        public function update(Request $request, $id)
        {
            $this->validate($request,[ 
                 
            ]);

            $ads = Ad::findOrFail($id);
                
                $ads->gsdfg = $request->gsdfg;
                $ads->sdfg = $request->sdfg;
                $ads-> = $request->;

            if($ads ->update()){
                return redirect()->back()->with('success','  ads  Added successfully.');
            }
            else{
                return redirect()->back()->with('unsuccess','Failed try again.');
            }
            
        }        
        
        public function destroy($id)
{
  $ads = Ad::findOrFail($id);
     
  if( Ad::where('id',$id)->delete()){
   return redirect()->back()->with('success','  ads  deleted successfully.');
  }
  else{
      return redirect()->back()->with('unsuccess','Failed try again.');
  }
}



        public function index()
        {
          $ads = Ad::orderBy('updated_at','desc')->get();
          
          return view('.ads.index',compact('ads')); 
        }

        public function create()
        {
          return view('.ads.create');
        }        
        
        public function store(Request $request)
        {
           $this->validate($request,
                 
          ]);
          $ads  = new Ad();
          
                $ads->gsdfg = $request->gsdfg;
                $ads->sdfg = $request->sdfg;
                $ads->cvdfsg = $request->cvdfsg;
                $ads-> = $request->;
          if($ads ->save()){
              return redirect()->back()->with('success',' Ad Added successfully.');
          }
          else{
              return redirect()->back()->with('unsuccess','Failed try again.');
          }
        
        }

        public function show($id)
        {
          $ads = Ad::findOrFail($id);
          return view('.ads.show',compact('ads'));
        };

        public function edit($id)
        {
            $ads = Ad::findOrFail($id);
            return view('.ads.edit',compact('ads'));
        }        
        
        public function update(Request $request, $id)
        {
            $this->validate($request,[ 
                 
            ]);

            $ads = Ad::findOrFail($id);
                
                $ads->gsdfg = $request->gsdfg;
                $ads->sdfg = $request->sdfg;
                $ads->cvdfsg = $request->cvdfsg;
                $ads-> = $request->;

            if($ads ->update()){
                return redirect()->back()->with('success','  ads  Added successfully.');
            }
            else{
                return redirect()->back()->with('unsuccess','Failed try again.');
            }
            
        }        
        
        public function destroy($id)
{
  $ads = Ad::findOrFail($id);
     
  if( Ad::where('id',$id)->delete()){
   return redirect()->back()->with('success','  ads  deleted successfully.');
  }
  else{
      return redirect()->back()->with('unsuccess','Failed try again.');
  }
}
